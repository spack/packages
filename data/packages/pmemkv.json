{
    "name": "pmemkv",
    "aliases": [],
    "versions": [
        {
            "name": "master",
            "branch": "master"
        },
        {
            "name": "1.4",
            "sha256": "6630917e0203eff7a520071c858baa7b7e108088da2fe8c4b31ec5f8c661fbe9"
        },
        {
            "name": "1.3",
            "sha256": "f1b946ef3545bcc2751fa2e4faab0538cd3072b66d4c4575f21712e0cc53bae8"
        },
        {
            "name": "1.2",
            "sha256": "22de74392e0a6eea5aa1955ed2d59462bf45ec69a01eb1cf2115e39e7bdc4754"
        },
        {
            "name": "1.1",
            "sha256": "c4ca07c1fecad39b5dbf197673f033f27d74c9f9987f036f6eaf5c7f23a342f3"
        },
        {
            "name": "1.0.3",
            "sha256": "cae393a01ba69364271c5894046bf2c611f677ac88012f2473fadf6fcd20ff29"
        },
        {
            "name": "1.0.2",
            "sha256": "a0cbbb60c0342d6fd0b73d2cee1a1423c6a894b8d21daf669016809961fe23b8"
        }
    ],
    "build_system": "CMakePackage",
    "conflicts": [
        {
            "name": "+ipo",
            "spec": "^cmake@:3.8",
            "description": "+ipo is not supported by CMake < 3.9"
        }
    ],
    "variants": [
        {
            "name": "build_type",
            "default": "RelWithDebInfo",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "cmap",
            "default": true,
            "description": "enable cmap engine."
        },
        {
            "name": "vcmap",
            "default": true,
            "description": "enable vcmap engine."
        },
        {
            "name": "vsmap",
            "default": true,
            "description": "enable vsmap engine."
        },
        {
            "name": "csmap",
            "default": false,
            "description": "enable experimental csmap engine."
        },
        {
            "name": "stree",
            "default": true,
            "description": "enable experimental stree engine."
        },
        {
            "name": "tree3",
            "default": false,
            "description": "enable experimental tree3 engine."
        },
        {
            "name": "radix",
            "default": false,
            "description": "enable experimental radix engine."
        },
        {
            "name": "robinhood",
            "default": false,
            "description": "enable experimental robinhood engine."
        },
        {
            "name": "dram_vcmap",
            "default": false,
            "description": "enable testing dram_vcmap engine."
        }
    ],
    "homepage": "https://pmem.io/pmemkv/",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "pmemkv is a local/embedded key-value datastore, optimized for persistent\nmemory.\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "libpmemobj-cpp",
            "description": "C++ bindings for libpmemobj (https://github.com/pmem/pmdk)"
        },
        {
            "name": "pmdk",
            "description": "The Persistent Memory Development Kit (PMDK), formerly known as NVML, is\na library for using memory-mapped persistence, optimized specifically\nfor persistent memory"
        },
        {
            "name": "memkind",
            "description": "The memkind library is a user extensible heap manager built on top of\njemalloc which enables control of memory characteristics and a\npartitioning of the heap between kinds of memory. The kinds of memory\nare defined by operating system memory policies that have been applied\nto virtual address ranges. Memory characteristics supported by memkind\nwithout user extension include control of NUMA and page size features.\nThe jemalloc non-standard interface has been extended to enable\nspecialized arenas to make requests for virtual memory from the\noperating system through the memkind partition interface. Through the\nother memkind interfaces the user can control and extend memory\npartition features and allocate memory while selecting enabled features."
        },
        {
            "name": "rapidjson",
            "description": "A fast JSON parser/generator for C++ with both SAX/DOM style API"
        },
        {
            "name": "tbb",
            "description": "Intel Parallel Studio."
        }
    ],
    "dependent_to": []
}