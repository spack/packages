{
    "name": "py-xarray",
    "aliases": [],
    "versions": [
        {
            "name": "0.17.0",
            "sha256": "9c2edad2a4e588f9117c666a4249920b9717fb75703b96998cf65fcd4f60551f"
        },
        {
            "name": "0.16.2",
            "sha256": "38e8439d6c91bcd5b7c0fca349daf8e0643ac68850c987262d53526e9d7d01e4"
        },
        {
            "name": "0.14.0",
            "sha256": "a8b93e1b0af27fa7de199a2d36933f1f5acc9854783646b0f1b37fed9b4da091"
        },
        {
            "name": "0.13.0",
            "sha256": "80e5746ffdebb96b997dba0430ff02d98028ef3828e6db6106cbbd6d62e32825"
        },
        {
            "name": "0.12.0",
            "sha256": "856fd062c55208a248ac3784cac8d3524b355585387043efc92a4188eede57f3"
        },
        {
            "name": "0.11.0",
            "sha256": "636964baccfca0e5d69220ac4ecb948d561addc76f47704064dcbe399e03a818"
        },
        {
            "name": "0.9.1",
            "sha256": "89772ed0e23f0e71c3fb8323746374999ecbe79c113e3fadc7ae6374e6dc0525"
        }
    ],
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "io",
            "default": false,
            "description": "Build io backends"
        }
    ],
    "homepage": "https://github.com/pydata/xarray",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [],
    "resources": [],
    "description": "N-D labeled arrays and datasets in Python\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-setuptools-scm",
            "description": "The blessed package to manage your versions by scm tags."
        },
        {
            "name": "py-pandas",
            "description": "pandas is a fast, powerful, flexible and easy to use open source data\nanalysis and manipulation tool, built on top of the Python programming\nlanguage."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "py-netcdf4",
            "description": "Python interface to the netCDF Library."
        },
        {
            "name": "py-h5netcdf",
            "description": "A Python interface for the netCDF4 file-format that reads and writes\nlocal or remote HDF5 files directly via h5py or h5pyd, without relying\non the Unidata netCDF library."
        },
        {
            "name": "py-scipy",
            "description": "SciPy (pronounced \"Sigh Pie\") is a Scientific Library for Python. It\nprovides many user-friendly and efficient numerical routines such as\nroutines for numerical integration and optimization."
        },
        {
            "name": "py-pydap",
            "description": "An implementation of the Data Access Protocol."
        },
        {
            "name": "py-zarr",
            "description": "Zarr is a Python package providing an implementation of chunked,\ncompressed, N-dimensional arrays."
        },
        {
            "name": "py-fsspec",
            "description": "A specification for pythonic filesystems."
        },
        {
            "name": "py-cftime",
            "description": "Python library for decoding time units and variable values in a netCDF\nfile conforming to the Climate and Forecasting (CF) netCDF conventions"
        },
        {
            "name": "py-rasterio",
            "description": "Rasterio reads and writes geospatial raster data. Geographic information\nsystems use GeoTIFF and other formats to organize and store gridded, or\nraster, datasets. Rasterio reads and writes these formats and provides a\nPython API based on N-D arrays."
        },
        {
            "name": "py-cfgrib",
            "description": "Python interface to map GRIB files to the NetCDF Common Data Model\nfollowing the CF Convention using ecCodes."
        }
    ],
    "dependent_to": [
        {
            "name": "py-geocube",
            "description": "Tool to convert geopandas vector data into rasterized xarray data."
        },
        {
            "name": "py-datacube",
            "description": "An analysis environment for satellite and other earth observation data."
        },
        {
            "name": "py-metpy",
            "description": "Collection of tools for reading, visualizing and performing calculations\nwith weather data."
        },
        {
            "name": "py-wradlib",
            "description": "wradlib is designed to assist you in the most important steps of\nprocessing weather radar data. These may include: reading common data\nformats, georeferencing, converting reflectivity to rainfall intensity,\nidentifying and correcting typical error sources (such as clutter or\nattenuation) and visualising the data."
        },
        {
            "name": "py-cfgrib",
            "description": "Python interface to map GRIB files to the NetCDF Common Data Model\nfollowing the CF Convention using ecCodes."
        },
        {
            "name": "py-arviz",
            "description": "ArviZ (pronounced \"AR-vees\") is a Python package for exploratory\nanalysis of Bayesian models. Includes functions for posterior analysis,\nmodel checking, comparison and diagnostics."
        },
        {
            "name": "py-rioxarray",
            "description": "rasterio xarray extension."
        }
    ]
}