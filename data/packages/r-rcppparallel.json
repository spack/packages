{
    "name": "r-rcppparallel",
    "aliases": [],
    "versions": [
        {
            "name": "5.1.5",
            "sha256": "6396322b3b6d6f7019aac808ceb74707bc5c4ed01677fab408372c2a5508c2ea"
        },
        {
            "name": "5.0.2",
            "sha256": "8ca200908c6365aafb2063be1789f0894969adc03c0f523c6cc45434b8236f81"
        },
        {
            "name": "4.4.3",
            "sha256": "7a04929ecab97e46c0b09fe5cdbac9d7bfa17ad7d111f1a9787a9997f45fa0fa"
        }
    ],
    "latest_version": "5.1.5",
    "build_system": "RPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://cloud.r-project.org/package=RcppParallel",
    "maintainers": [
        "glennpj"
    ],
    "patches": [
        {
            "owner": "builtin.r-rcppparallel",
            "sha256": "09e093214e1415e6424425d3ab01b89c9f571fc41e66c171bff931ea77f3452a",
            "level": 1,
            "working_dir": ".",
            "relative_path": "asclang.patch",
            "version": "%fj"
        }
    ],
    "resources": [],
    "description": "Parallel Programming Tools for 'Rcpp'. High level functions for parallel\nprogramming with 'Rcpp'. For example, the 'parallelFor()' function can\nbe used to convert the work of a standard serial \"for\" loop into a\nparallel one and the 'parallelReduce()' function can be used for\naccumulating aggregate or other values.\n",
    "dependencies": [
        {
            "name": "r",
            "description": "R is 'GNU S', a freely available language and environment for\nstatistical computing and graphics which provides a wide variety of\nstatistical and graphical techniques: linear and nonlinear modelling,\nstatistical tests, time series analysis, classification, clustering,\netc. Please consult the R project homepage for further information."
        },
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "tbb",
            "description": "Intel oneAPI TBB. LICENSE INFORMATION: By downloading and using this\nsoftware, you agree to the terms and conditions of the software license\nagreements at https://intel.ly/393CijO."
        }
    ],
    "dependent_to": [
        {
            "name": "r-stringfish",
            "description": "Alt String Implementation. Provides an extendable, performant and\nmultithreaded 'alt-string' implementation backed by 'C++' vectors and\nstrings."
        },
        {
            "name": "r-blavaan",
            "description": "Bayesian Latent Variable Analysis. Fit a variety of Bayesian latent\nvariable models, including confirmatory factor analysis, structural\nequation models, and latent growth curve models. References: Merkle &\nRosseel (2018) <doi:10.18637/jss.v085.i04>; Merkle et al. (2021)\n<doi:10.18637/jss.v100.i06>."
        },
        {
            "name": "r-uwot",
            "description": "The Uniform Manifold Approximation and Projection (UMAP) Method for\nDimensionality Reduction. An implementation of the Uniform Manifold\nApproximation and Projection dimensionality reduction by McInnes et al.\n(2018) <arXiv:1802.03426>. It also provides means to transform new data\nand to carry out supervised dimensionality reduction. An implementation\nof the related LargeVis method of Tang et al. (2016) <arXiv:1602.00370>\nis also provided. This is a complete re-implementation in R (and C++,\nvia the 'Rcpp' package): no Python installation is required. See the\nuwot website (<https://github.com/jlmelville/uwot>) for more\ndocumentation and examples."
        },
        {
            "name": "r-rstantools",
            "description": "Tools for Developing R Packages Interfacing with 'Stan'. Provides\nvarious tools for developers of R packages interfacing with 'Stan'\n<https://mc-stan.org>, including functions to set up the required\npackage structure, S3 generics and default methods to unify function\nnaming across 'Stan'-based R packages, and vignettes with\nrecommendations for developers."
        },
        {
            "name": "r-dada2",
            "description": "Accurate sample inference from amplicon data with single nucleotide\nresolution"
        },
        {
            "name": "r-rstan",
            "description": "R Interface to Stan. User-facing R functions are provided to parse,\ncompile, test, estimate, and analyze Stan models by accessing the\nheader-only Stan library provided by the 'StanHeaders' package. The Stan\nproject develops a probabilistic programming language that implements\nfull Bayesian statistical inference via Markov Chain Monte Carlo, rough\nBayesian inference via variational approximation, and (optionally\npenalized) maximum likelihood estimation via optimization. In all three\ncases, automatic differentiation is used to quickly and accurately\nevaluate gradients without burdening the user with the need to derive\nthe partial derivatives."
        },
        {
            "name": "r-stanheaders",
            "description": "C++ Header Files for Stan. The C++ header files of the Stan project are\nprovided by this package, but it contains no R code, vignettes, or\nfunction documentation. There is a shared object containing part of the\nCVODES library, but it is not accessible from R. StanHeaders is only\nuseful for developers who want to utilize the LinkingTo directive of\ntheir package's DESCRIPTION file to build on the Stan library without\nincurring unnecessary dependencies. The Stan project develops a\nprobabilistic programming language that implements full or approximate\nBayesian statistical inference via Markov Chain Monte Carlo or\nvariational methods and implements (optionally penalized) maximum\nlikelihood estimation via optimization. The Stan library includes an\nadvanced automatic differentiation scheme, templated statistical and\nlinear algebra functions that can handle the automatically\ndifferentiable scalar types (and doubles, ints, etc.), and a parser for\nthe Stan language. The 'rstan' package provides user-facing R functions\nto parse, compile, test, estimate, and analyze Stan models."
        }
    ]
}