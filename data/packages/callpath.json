{
    "name": "callpath",
    "aliases": [],
    "versions": [
        {
            "name": "1.0.4",
            "sha256": "4949974d60f18bb34e44e5a4e60032c39624dde5c3f16d557b3a6845eead4e2e"
        },
        {
            "name": "1.0.2",
            "sha256": "cbe42bba8b9dda259dcbe7e16ebd7ecd005eabf7e9ccf169535b03110df75c84"
        },
        {
            "name": "1.0.1",
            "sha256": "9bd9723126f80d0b518c28e5298ad0fa8d8dbc6a3f03fee5ae5449cf4c9a550f"
        }
    ],
    "latest_version": "1.0.4",
    "build_system": "CMakePackage",
    "conflicts": [
        {
            "name": "+ipo",
            "spec": "^cmake@:3.8",
            "description": "+ipo is not supported by CMake < 3.9"
        }
    ],
    "variants": [
        {
            "name": "build_type",
            "default": "RelWithDebInfo",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        }
    ],
    "homepage": "https://github.com/llnl/callpath",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "Library for representing callpaths consistently in distributed-memory\nperformance tools.\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "elf",
            "description": "elfutils is a collection of various binary tools such as eu-objdump, eu-\nreadelf, and other utilities that allow you to inspect and manipulate\nELF files. Refer to Table 5.Tools Included in elfutils for Red Hat\nDeveloper for a complete list of binary tools that are distributed with\nthe Red Hat Developer Toolset version of elfutils."
        },
        {
            "name": "libdwarf",
            "description": "The DWARF Debugging Information Format is of interest to programmers\nworking on compilers and debuggers (and any one interested in reading or\nwriting DWARF information). It was developed by a committee (known as\nthe PLSIG at the time) starting around 1991. Starting around 1991 SGI\ndeveloped the libdwarf and dwarfdump tools for internal use and as part\nof SGI IRIX developer tools. Since that time dwarfdump and libdwarf have\nbeen shipped (as an executable and archive respectively, not source)\nwith every release of the SGI MIPS/IRIX C compiler."
        },
        {
            "name": "dyninst",
            "description": "API for dynamic binary instrumentation. Modify programs while they are\nexecuting without recompiling, re-linking, or re-executing."
        },
        {
            "name": "adept-utils",
            "description": "Utility libraries for LLNL performance tools."
        },
        {
            "name": "mpi",
            "description": "MPItrampoline: A forwarding MPI implementation that can use any other\nMPI implementation via an MPI ABI."
        }
    ],
    "dependent_to": [
        {
            "name": "automaded",
            "description": "AutomaDeD (Automata-based Debugging for Dissimilar parallel tasks) is a\ntool for automatic diagnosis of performance and correctness problems in\nMPI applications. It creates control-flow models of each MPI process\nand, when a failure occurs, these models are leveraged to find the\norigin of problems automatically. MPI calls are intercepted (using\nwrappers) to create the models. When an MPI application hangs, AutomaDeD\ncreates a progress-dependence graph that helps finding the process (or\ngroup of processes) that caused the hang."
        },
        {
            "name": "mpileaks",
            "description": "Tool to detect and report MPI objects like MPI_Requests and\nMPI_Datatypes."
        }
    ]
}