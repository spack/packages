{
    "name": "py-twine",
    "aliases": [],
    "versions": [
        {
            "name": "2.0.0",
            "sha256": "9fe7091715c7576df166df8ef6654e61bada39571783f2fd415bdcba867c6993"
        }
    ],
    "latest_version": "2.0.0",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://twine.readthedocs.io/",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [],
    "resources": [],
    "description": "Twine is a utility for publishing Python packages on PyPI.\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "py-pkginfo",
            "description": "Query metadatdata from sdists / bdists / installed packages."
        },
        {
            "name": "py-readme-renderer",
            "description": "readme_renderer is a library for rendering \"readme\" descriptions for\nWarehouse."
        },
        {
            "name": "py-requests-toolbelt",
            "description": "A toolbelt of useful classes and functions to be used with python-\nrequests"
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-tqdm",
            "description": "A Fast, Extensible Progress Meter"
        }
    ],
    "dependent_to": [
        {
            "name": "py-python-daemon",
            "description": "Library to implement a well-behaved Unix daemon process. This library\nimplements the well-behaved daemon specification of PEP Standard daemon\nprocess. A well-behaved Unix daemon process is tricky to get right, but\nthe required steps are much the same for every daemon program. A\nDaemonContext instance holds the behaviour and configured process\nenvironment for the program; use the instance as a context manager to\nenter a daemon state."
        },
        {
            "name": "py-graphviz",
            "description": "Simple Python interface for Graphviz"
        }
    ]
}