{
    "name": "py-networkx",
    "aliases": [],
    "versions": [
        {
            "name": "2.5.1",
            "sha256": "109cd585cac41297f71103c3c42ac6ef7379f29788eb54cb751be5a663bb235a"
        },
        {
            "name": "2.4",
            "sha256": "f8f4ff0b6f96e4f9b16af6b84622597b5334bf9cae8cf9b2e42e7985d5c95c64"
        },
        {
            "name": "2.3",
            "sha256": "8311ddef63cf5c5c5e7c1d0212dd141d9a1fe3f474915281b73597ed5f1d4e3d"
        },
        {
            "name": "2.2",
            "sha256": "45e56f7ab6fe81652fb4bc9f44faddb0e9025f469f602df14e3b2551c2ea5c8b"
        },
        {
            "name": "2.1",
            "sha256": "64272ca418972b70a196cb15d9c85a5a6041f09a2f32e0d30c0255f25d458bb1"
        },
        {
            "name": "2.0",
            "sha256": "cd5ff8f75d92c79237f067e2f0876824645d37f017cfffa5b7c9678cae1454aa"
        },
        {
            "name": "1.11",
            "sha256": "0d0e70e10dfb47601cbb3425a00e03e2a2e97477be6f80638fef91d54dd1e4b8"
        },
        {
            "name": "1.10",
            "sha256": "ced4095ab83b7451cec1172183eff419ed32e21397ea4e1971d92a5808ed6fb8"
        }
    ],
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "http://networkx.github.io/",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [],
    "resources": [],
    "description": "NetworkX is a Python package for the creation, manipulation, and study\nof the structure, dynamics, and functions of complex networks.\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-decorator",
            "description": "The aim of the decorator module it to simplify the usage of decorators\nfor the average programmer, and to popularize decorators by showing\nvarious non-trivial examples."
        }
    ],
    "dependent_to": [
        {
            "name": "py-pythran",
            "description": "Ahead of Time compiler for numeric kernels."
        },
        {
            "name": "py-scikit-image",
            "description": "Image processing algorithms for SciPy, including IO, morphology,\nfiltering, warping, color manipulation, object detection, etc."
        },
        {
            "name": "py-mdanalysis",
            "description": "MDAnalysis is a Python toolkit to analyze molecular dynamics\ntrajectories generated by a wide range of popular simulation packages\nincluding DL_Poly, CHARMM, Amber, NAMD, LAMMPS, and Gromacs. (See the\nlists of supported trajectory formats and topology formats.)"
        },
        {
            "name": "py-pypeflow",
            "description": "pypeFLOW is light weight and reusable make / flow data process library\nwritten in Python."
        },
        {
            "name": "py-prov",
            "description": "A Python library for W3C Provenance Data Model (PROV). A library for W3C\nProvenance Data Model supporting PROV-JSON, PROV-XML and PROV-O (RDF)"
        },
        {
            "name": "py-dgl",
            "description": "Deep Graph Library (DGL). DGL is an easy-to-use, high performance and\nscalable Python package for deep learning on graphs. DGL is framework\nagnostic, meaning if a deep graph model is a component of an end-to-end\napplication, the rest of the logics can be implemented in any major\nframeworks, such as PyTorch, Apache MXNet or TensorFlow."
        },
        {
            "name": "py-whatshap",
            "description": "WhatsHap is a software for phasing genomic variants using DNA sequencing\nreads, also called read-based phasing or haplotype assembly."
        },
        {
            "name": "callflow",
            "description": "CallFlow is an interactive visual analysis tool that provides a high-\nlevel overview of CCTs together with semantic refinement operations to\nprogressively explore the CCTs."
        },
        {
            "name": "gaudi",
            "description": "An experiment-independent HEP event data processing framework"
        },
        {
            "name": "py-nipype",
            "description": "Neuroimaging in Python: Pipelines and Interfaces."
        },
        {
            "name": "py-vcf-kit",
            "description": "VCF-kit is a command-line based collection of utilities for performing\nanalysis on Variant Call Format (VCF) files."
        },
        {
            "name": "py-dvc",
            "description": "Git for data scientists - manage your code and data together."
        },
        {
            "name": "py-yahmm",
            "description": "YAHMM is a HMM package for Python, implemented in Cython for speed."
        },
        {
            "name": "falcon",
            "description": "Falcon: a set of tools for fast aligning long reads for consensus and\nassembly. The Falcon tool kit is a set of simple code collection which I\nuse for studying efficient assembly algorithm for haploid and diploid\ngenomes. It has some back-end code implemented in C for speed and some\nsimple front-end written in Python for convenience."
        },
        {
            "name": "py-gemini",
            "description": "GEMINI (GEnome MINIng) is a flexible framework for exploring genetic\nvariation in the context of the wealth of genome annotations available\nfor the human genome."
        },
        {
            "name": "py-torch-geometric",
            "description": "PyTorch Geometric (PyG) is a geometric deep learning extension library\nfor PyTorch. It consists of various methods for deep learning on graphs\nand other irregular structures, also known as geometric deep learning,\nfrom a variety of published papers. In addition, it consists of an easy-\nto-use mini-batch loader for many small and single giant graphs, multi\ngpu-support, a large number of common benchmark datasets (based on\nsimple interfaces to create your own), and helpful transforms, both for\nlearning on arbitrary graphs as well as on 3D meshes or point clouds."
        },
        {
            "name": "py-mikado",
            "description": "Mikado is a lightweight Python3 pipeline whose purpose is to facilitate\nthe identification of expressed loci from RNA-Seq data * and to select\nthe best models in each locus."
        },
        {
            "name": "py-pomegranate",
            "description": "Fast, flexible and easy to use probabilistic modelling in Python."
        },
        {
            "name": "py-hyperopt",
            "description": "Hyperopt is a Python library for serial and parallel optimization over\nawkward search spaces, which may include real-valued, discrete, and\nconditional dimensions."
        },
        {
            "name": "pbsuite",
            "description": "PBJelly is a highly automated pipeline that aligns long sequencing reads\n(such as PacBio RS reads or long 454 reads in fasta format) to high-\nconfidence draft assembles."
        },
        {
            "name": "py-python-louvain",
            "description": "This module implements community detection. It uses the louvain method\ndescribed in Fast unfolding of communities in large networks, Vincent D\nBlondel, Jean-Loup Guillaume, Renaud Lambiotte, Renaud Lefebvre, Journal\nof Statistical Mechanics: Theory and Experiment 2008(10), P10008 (12pp)"
        },
        {
            "name": "pagmo",
            "description": "Parallel Global Multiobjective Optimizer (and its Python alter ego\nPyGMO) is a C++ / Python platform to perform parallel computations of\noptimisation tasks (global and local) via the asynchronous generalized\nisland model."
        },
        {
            "name": "py-colormath",
            "description": "Color math and conversion library."
        },
        {
            "name": "py-mapclassify",
            "description": "Classification Schemes for Choropleth Maps."
        }
    ]
}