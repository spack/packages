{
    "name": "py-torchvision",
    "aliases": [],
    "versions": [
        {
            "name": "master",
            "branch": "master"
        },
        {
            "name": "0.10.0",
            "sha256": "82bb2c2b03d8a65f4ea74bb0ee5566b0876a1992aceefb1e11475c7b5d2e857b"
        },
        {
            "name": "0.9.1",
            "sha256": "79964773729880e0eee0e6af13f336041121d4cc8491a3e2c0e5f184cac8a718"
        },
        {
            "name": "0.9.0",
            "sha256": "9351ed92aded632f8c7f59dfadac13c191a834babe682f5785ea47e6fcf6b472"
        },
        {
            "name": "0.8.2",
            "sha256": "9a866c3c8feb23b3221ce261e6153fc65a98ce9ceaa71ccad017016945c178bf"
        },
        {
            "name": "0.8.1",
            "sha256": "c46734c679c99f93e5c06654f4295a05a6afe6c00a35ebd26a2cce507ae1ccbd"
        },
        {
            "name": "0.8.0",
            "sha256": "b5f040faffbfc7bac8d4687d8665bd1196937334589b3fb5fcf15bb69ca25391"
        },
        {
            "name": "0.7.0",
            "sha256": "fa0a6f44a50451115d1499b3f2aa597e0092a07afce1068750260fa7dd2c85cb"
        },
        {
            "name": "0.6.1",
            "sha256": "8173680a976c833640ecbd0d7e6f0a11047bf8833433e2147180efc905e48656"
        },
        {
            "name": "0.6.0",
            "sha256": "02de11b3abe6882de4032ce86dab9c7794cbc84369b44d04e667486580f0f1f7"
        },
        {
            "name": "0.5.0",
            "sha256": "eb9afc93df3d174d975ee0914057a9522f5272310b4d56c150b955c287a4d74d"
        },
        {
            "name": "0.4.2",
            "sha256": "1184a27eab85c9e784bacc6f9d6fec99e168ab4eda6047ef9f709e7fdb22d8f9"
        },
        {
            "name": "0.4.1",
            "sha256": "053689351272b3bd2ac3e6ba51efd284de0e4ca4a301f54674b949f1e62b7176"
        },
        {
            "name": "0.4.0",
            "sha256": "c270d74e568bad4559fed4544f6dd1e22e2eb1c60b088e04a5bd5787c4150589"
        },
        {
            "name": "0.3.0",
            "sha256": "c205f0618c268c6ed2f8abb869ef6eb83e5339c1336c243ad321a2f2a85195f0"
        }
    ],
    "build_system": "PythonPackage",
    "conflicts": [
        {
            "name": "backend=png",
            "spec": "@:0.7",
            "description": "None"
        },
        {
            "name": "backend=jpeg",
            "spec": "@:0.7",
            "description": "None"
        }
    ],
    "variants": [
        {
            "name": "backend",
            "default": "pil",
            "description": "Image backend"
        }
    ],
    "homepage": "https://github.com/pytorch/vision",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [],
    "resources": [],
    "description": "The torchvision package consists of popular datasets, model\narchitectures, and common image transformations for computer vision.\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "ninja",
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "py-six",
            "description": "Python 2 and 3 compatibility utilities."
        },
        {
            "name": "py-torch",
            "description": "Tensors and Dynamic neural networks in Python with strong GPU\nacceleration."
        },
        {
            "name": "pil",
            "description": "The Python Imaging Library (PIL) adds image processing capabilities to\nyour Python interpreter. This library supports many file formats, and\nprovides powerful image processing and graphics capabilities."
        },
        {
            "name": "py-accimage",
            "description": "An accelerated Image loader and preprocessor leveraging Intel IPP.\naccimage mimics the PIL API and can be used as a backend for\ntorchvision."
        },
        {
            "name": "libpng",
            "description": "libpng is the official PNG reference library."
        },
        {
            "name": "jpeg",
            "description": "libjpeg is a widely used free library with functions for handling the\nJPEG image data format. It implements a JPEG codec (encoding and\ndecoding) alongside various utilities for handling JPEG data."
        },
        {
            "name": "ffmpeg",
            "description": "FFmpeg is a complete, cross-platform solution to record, convert and\nstream audio and video."
        }
    ],
    "dependent_to": [
        {
            "name": "py-segmentation-models-pytorch",
            "description": "Python library with Neural Networks for Image Segmentation based on\nPyTorch."
        },
        {
            "name": "py-horovod",
            "description": "Horovod is a distributed deep learning training framework for\nTensorFlow, Keras, PyTorch, and Apache MXNet."
        },
        {
            "name": "py-pretrainedmodels",
            "description": "Pretrained models for Pytorch."
        },
        {
            "name": "cradl",
            "description": "The CRADL proxy application captured performance metrics during\ninference on data from multiphysics codes, specifically ALE\nhydrodynamics codes."
        },
        {
            "name": "py-torchmeta",
            "description": "A collection of extensions and data-loaders for few-shot learning &\nmeta-learning in PyTorch. Torchmeta contains popular meta-learning\nbenchmarks, fully compatible with both torchvision and PyTorch's\nDataLoader."
        },
        {
            "name": "py-timm",
            "description": "(Unofficial) PyTorch Image Models."
        },
        {
            "name": "minigan",
            "description": "miniGAN is a generative adversarial network code developed as part of\nthe Exascale Computing Project's (ECP) ExaLearn project at Sandia\nNational Laboratories."
        }
    ]
}