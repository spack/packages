{
    "name": "py-pytools",
    "aliases": [],
    "versions": [
        {
            "name": "2019.1.1",
            "sha256": "ce2d702ae4ef10a70197b00b93141461140d00578f2a862fa946ca1446a300db"
        },
        {
            "name": "2016.2.6",
            "sha256": "6dd49932b8f81a8b622685cff3dd515e351a9290aef0fd5d020e4df00c06aa95"
        }
    ],
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://pypi.org/project/pytools/",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [],
    "resources": [],
    "description": "A collection of tools for Python\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-decorator",
            "description": "The aim of the decorator module it to simplify the usage of decorators\nfor the average programmer, and to popularize decorators by showing\nvarious non-trivial examples."
        },
        {
            "name": "py-appdirs",
            "description": "A small Python module for determining appropriate platform-specific\ndirs, e.g. a \"user data dir\"."
        },
        {
            "name": "py-six",
            "description": "Python 2 and 3 compatibility utilities."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        }
    ],
    "dependent_to": [
        {
            "name": "py-pycuda",
            "description": "PyCUDA gives you easy, Pythonic access to Nvidia's CUDA parallel\ncomputation API"
        },
        {
            "name": "py-pyopencl",
            "description": "Python wrapper for OpenCL."
        }
    ]
}