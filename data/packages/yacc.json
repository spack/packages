{
    "name": "byacc",
    "aliases": [
        {
            "name": "yacc",
            "alias_for": "{byacc}"
        }
    ],
    "versions": [
        {
            "name": "master",
            "branch": "master"
        }
    ],
    "build_system": "AutotoolsPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://github.com/grandseiken/byacc",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "Berkeley Yacc is an LALR(1) parser generator. Berkeley Yacc has been\nmade as compatible as possible with AT&T Yacc. Berkeley Yacc can accept\nany input specification that conforms to the AT&T Yacc documentation.\nSpecifications that take advantage of undocumented features of AT&T Yacc\nwill probably be rejected.\n",
    "dependencies": [
        {
            "name": "m4",
            "description": "GNU M4 is an implementation of the traditional Unix macro processor."
        },
        {
            "name": "autoconf",
            "description": "Autoconf -- system configuration part of autotools"
        },
        {
            "name": "automake",
            "description": "Automake -- make file builder part of autotools"
        },
        {
            "name": "libtool",
            "description": "libtool -- library building part of autotools."
        }
    ],
    "dependent_to": [
        {
            "name": "es-shell",
            "description": "Es is an extensible shell. The language was derived from the Plan 9\nshell, rc, and was influenced by functional programming languages, such\nas Scheme, and the Tcl embeddable programming language. This\nimplementation is derived from Byron Rakitzis's public domain\nimplementation of rc."
        },
        {
            "name": "eckit",
            "description": "ecKit is a cross-platform c++ toolkit that supports development of tools\nand applications at ECMWF."
        },
        {
            "name": "swig",
            "description": "SWIG is an interface compiler that connects programs written in C and\nC++ with scripting languages such as Perl, Python, Ruby, and Tcl. It\nworks by taking the declarations found in C/C++ header files and using\nthem to generate the wrapper code that scripting languages need to\naccess the underlying C/C++ code. In addition, SWIG provides a variety\nof customization features that let you tailor the wrapping process to\nsuit your application."
        }
    ]
}