{
    "name": "py-traits",
    "aliases": [],
    "versions": [
        {
            "name": "6.3.1",
            "sha256": "ebdd9b067a262045840a85e3ff34e1567ce4e9b6548c716cdcc82b5884ed9100"
        },
        {
            "name": "6.2.0",
            "sha256": "16fa1518b0778fd53bf0547e6a562b1787bf68c8f6b7995a13bd1902529fdb0c"
        },
        {
            "name": "6.0.0",
            "sha256": "dbcd70166feca434130a1193284d5819ca72ffbc8dbce8deeecc0cebb41a3bfb"
        }
    ],
    "latest_version": "6.3.1",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://docs.enthought.com/traits",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [],
    "resources": [],
    "description": "Explicitly typed attributes for Python.\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        }
    ],
    "dependent_to": [
        {
            "name": "py-envisage",
            "description": "Envisage is a Python-based framework for building extensible\napplications, that is, applications whose functionality can be extended\nby adding \"plug-ins\". Envisage provides a standard mechanism for\nfeatures to be added to an application, whether by the original\ndeveloper or by someone else. In fact, when you build an application\nusing Envisage, the entire application consists primarily of plug-ins.\nIn this respect, it is similar to the Eclipse and Netbeans frameworks\nfor Java applications."
        },
        {
            "name": "py-pyface",
            "description": "The pyface project contains a toolkit-independent GUI abstraction layer,\nwhich is used to support the \"visualization\" features of the Traits\npackage. Thus, you can write code in terms of the Traits API (views,\nitems, editors, etc.), and let pyface and your selected toolkit and\nback-end take care of the details of displaying them."
        },
        {
            "name": "py-nipype",
            "description": "Neuroimaging in Python: Pipelines and Interfaces."
        },
        {
            "name": "py-traitsui",
            "description": "The TraitsUI project contains a toolkit-independent GUI abstraction\nlayer, which is used to support the \"visualization\" features of the\nTraits package. Thus, you can write model in terms of the Traits API and\nspecify a GUI in terms of the primitives supplied by TraitsUI (views,\nitems, editors, etc.), and let TraitsUI and your selected toolkit and\nback-end take care of the details of displaying them."
        },
        {
            "name": "py-mayavi",
            "description": "Mayavi: 3D visualization of scientific data in Python."
        }
    ]
}