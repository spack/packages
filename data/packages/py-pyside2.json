{
    "name": "py-pyside2",
    "aliases": [],
    "versions": [
        {
            "name": "develop",
            "tag": "dev"
        },
        {
            "name": "5.15.2.1",
            "tag": "v5.15.2.1",
            "submodules": true
        },
        {
            "name": "5.14.2.1",
            "tag": "v5.14.2.1",
            "submodules": true
        },
        {
            "name": "5.13.2",
            "tag": "v5.13.2",
            "submodules": true
        },
        {
            "name": "5.13.1",
            "tag": "v5.13.1",
            "submodules": true
        },
        {
            "name": "5.13.0",
            "tag": "v5.13.0",
            "submodules": true
        },
        {
            "name": "5.12.5",
            "tag": "v5.12.5",
            "submodules": true
        }
    ],
    "latest_version": "5.15.2.1",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "doc",
            "default": false,
            "description": "Enables the generation of html and man page documentation"
        }
    ],
    "homepage": "https://www.pyside.org/",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [],
    "resources": [],
    "description": "Python bindings for Qt.\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "llvm",
            "description": "The LLVM Project is a collection of modular and reusable compiler and\ntoolchain technologies. Despite its name, LLVM has little to do with\ntraditional virtual machines, though it does provide helpful libraries\nthat can be used to build them. The name \"LLVM\" itself is not an\nacronym; it is the full name of the project."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-packaging",
            "description": "Core utilities for Python packages."
        },
        {
            "name": "qt",
            "description": "Qt is a comprehensive cross-platform C++ application framework."
        },
        {
            "name": "graphviz",
            "description": "Graph Visualization Software"
        },
        {
            "name": "libxml2",
            "description": "Libxml2 is the XML C parser and toolkit developed for the Gnome project\n(but usable outside of the Gnome platform), it is free software\navailable under the MIT License."
        },
        {
            "name": "libxslt",
            "description": "Libxslt is the XSLT C library developed for the GNOME project. XSLT\nitself is a an XML language to define transformation for XML. Libxslt is\nbased on libxml2 the XML C library developed for the GNOME project. It\nalso implements most of the EXSLT set of processor-portable extensions\nfunctions and some of Saxon's evaluate and expressions extensions."
        },
        {
            "name": "py-sphinx",
            "description": "Sphinx Documentation Generator."
        }
    ],
    "dependent_to": [
        {
            "name": "py-qtpy",
            "description": "QtPy: Abtraction layer for PyQt5/PyQt4/PySide/PySide2"
        },
        {
            "name": "py-pyface",
            "description": "The pyface project contains a toolkit-independent GUI abstraction layer,\nwhich is used to support the \"visualization\" features of the Traits\npackage. Thus, you can write code in terms of the Traits API (views,\nitems, editors, etc.), and let pyface and your selected toolkit and\nback-end take care of the details of displaying them."
        },
        {
            "name": "py-traitsui",
            "description": "The TraitsUI project contains a toolkit-independent GUI abstraction\nlayer, which is used to support the \"visualization\" features of the\nTraits package. Thus, you can write model in terms of the Traits API and\nspecify a GUI in terms of the primitives supplied by TraitsUI (views,\nitems, editors, etc.), and let TraitsUI and your selected toolkit and\nback-end take care of the details of displaying them."
        }
    ]
}