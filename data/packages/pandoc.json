{
    "name": "pandoc",
    "aliases": [],
    "versions": [
        {
            "name": "2.14.0.3",
            "sha256": "c6c1addd968699733c7d597cf269cc66d692371995703c32e5262f84a125c27b"
        },
        {
            "name": "2.11.4",
            "sha256": "13b8597860afa6ab802993a684b340be3f31f4d2a06c50b6601f9e726cf76f71"
        },
        {
            "name": "2.7.3",
            "sha256": "fb93800c90f3fab05dbd418ee6180d086b619c9179b822ddfecb608874554ff0"
        }
    ],
    "latest_version": "2.14.0.3",
    "build_system": "Package",
    "conflicts": [
        {
            "name": "target=aarch64:",
            "spec": "@:2.11",
            "description": "aarch64 is not supported."
        }
    ],
    "variants": [
        {
            "name": "texlive",
            "default": true,
            "description": "Use TeX Live to enable PDF output"
        }
    ],
    "homepage": "https://pandoc.org",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "If you need to convert files from one markup format into another, pandoc\nis your swiss-army knife.\n",
    "dependencies": [
        {
            "name": "texlive",
            "description": "TeX Live is an easy (we hope) way to get up and running with the TeX\ndocument production system. It provides a comprehensive TeX system with\nbinaries for most flavors of Unix, including GNU/Linux, macOS, and also\nWindows. It includes all the major TeX-related programs, macro packages,\nand fonts that are free software, including support for many languages\naround the world."
        }
    ],
    "dependent_to": [
        {
            "name": "py-dask-glm",
            "description": "Dask-glm is a library for fitting Generalized Linear Models on large\ndatasets."
        },
        {
            "name": "r-rmarkdown",
            "description": "Dynamic Documents for R. Convert R Markdown documents into a variety of\nformats."
        },
        {
            "name": "r-prettydoc",
            "description": "Creating Pretty Documents from R Markdown. Creating tiny yet beautiful\ndocuments and vignettes from R Markdown. The package provides the\n'html_pretty' output format as an alternative to the 'html_document' and\n'html_vignette' engines that convert R Markdown into HTML pages. Various\nthemes and syntax highlight styles are supported."
        },
        {
            "name": "r-rstantools",
            "description": "Tools for Developing R Packages Interfacing with 'Stan'. Provides\nvarious tools for developers of R packages interfacing with 'Stan'\n<https://mc-stan.org>, including functions to set up the required\npackage structure, S3 generics and default methods to unify function\nnaming across 'Stan'-based R packages, and vignettes with\nrecommendations for developers."
        },
        {
            "name": "r-rgl",
            "description": "3D Visualization Using OpenGL. Provides medium to high level functions\nfor 3D interactive graphics, including functions modelled on base\ngraphics (plot3d(), etc.) as well as functions for constructing\nrepresentations of geometric objects (cube3d(), etc.). Output may be on\nscreen using OpenGL, or to various standard 3D file formats including\nWebGL, PLY, OBJ, STL as well as 2D image formats, including PNG,\nPostscript, SVG, PGF."
        },
        {
            "name": "pmix",
            "description": "The Process Management Interface (PMI) has been used for quite some time\nas a means of exchanging wireup information needed for interprocess\ncommunication. However, meeting the significant orchestration challenges\npresented by exascale systems requires that the process-to-system\ninterface evolve to permit a tighter integration between the different\ncomponents of the parallel application and existing and future SMS\nsolutions. PMI Exascale (PMIx) addresses these needs by providing an\nextended version of the PMI definitions specifically designed to support\nexascale and beyond environments by: (a) adding flexibility to the\nfunctionality expressed in the existing APIs, (b) augmenting the\ninterfaces with new APIs that provide extended capabilities, (c) forging\na collaboration between subsystem providers including resource manager,\nfabric, file system, and programming library developers, (d)\nestablishing a standards-like body for maintaining the definitions, and\n(e) providing a reference implementation of the PMIx standard that\ndemonstrates the desired level of scalability while maintaining strict\nseparation between it and the standard itself."
        },
        {
            "name": "r-knitr",
            "description": "A General-Purpose Package for Dynamic Report Generation in R. Provides a\ngeneral-purpose tool for dynamic report generation in R using Literate\nProgramming techniques."
        },
        {
            "name": "py-nbsphinx",
            "description": "nbsphinx is a Sphinx extension that provides a source parser for *.ipynb\nfiles."
        },
        {
            "name": "r-loo",
            "description": "Efficient Leave-One-Out Cross-Validation and WAIC for BayesianModels.\nEfficient approximate leave-one-out cross-validation (LOO) for Bayesian\nmodels fit using Markov chain Monte Carlo, as described in Vehtari,\nGelman, and Gabry (2017) <doi:10.1007/s11222-016-9696-4>. The\napproximation uses Pareto smoothed importance sampling (PSIS), a new\nprocedure for regularizing importance weights. As a byproduct of the\ncalculations, we also obtain approximate standard errors for estimated\npredictive errors and for the comparison of predictive errors between\nmodels. The package also provides methods for using stacking and other\nmodel weighting techniques to average Bayesian predictive distributions."
        },
        {
            "name": "r-rstan",
            "description": "R Interface to Stan. User-facing R functions are provided to parse,\ncompile, test, estimate, and analyze Stan models by accessing the\nheader-only Stan library provided by the 'StanHeaders' package. The Stan\nproject develops a probabilistic programming language that implements\nfull Bayesian statistical inference via Markov Chain Monte Carlo, rough\nBayesian inference via variational approximation, and (optionally\npenalized) maximum likelihood estimation via optimization. In all three\ncases, automatic differentiation is used to quickly and accurately\nevaluate gradients without burdening the user with the need to derive\nthe partial derivatives."
        },
        {
            "name": "r-reprex",
            "description": "Prepare Reproducible Example Code via the Clipboard. Convenience wrapper\nthat uses the 'rmarkdown' package to render small snippets of code to\ntarget formats that include both code and output. The goal is to\nencourage the sharing of small, reproducible, and runnable examples on\ncode-oriented websites, such as <https://stackoverflow.com/> and\n<https://github.com>, or in email. 'reprex' also extracts clean,\nrunnable R code from various common formats, such as copy/paste from an\nR session."
        },
        {
            "name": "r-stanheaders",
            "description": "C++ Header Files for Stan. The C++ header files of the Stan project are\nprovided by this package, but it contains no R code, vignettes, or\nfunction documentation. There is a shared object containing part of the\nCVODES library, but it is not accessible from R. StanHeaders is only\nuseful for developers who want to utilize the LinkingTo directive of\ntheir package's DESCRIPTION file to build on the Stan library without\nincurring unnecessary dependencies. The Stan project develops a\nprobabilistic programming language that implements full or approximate\nBayesian statistical inference via Markov Chain Monte Carlo or\nvariational methods and implements (optionally penalized) maximum\nlikelihood estimation via optimization. The Stan library includes an\nadvanced automatic differentiation scheme, templated statistical and\nlinear algebra functions that can handle the automatically\ndifferentiable scalar types (and doubles, ints, etc.), and a parser for\nthe Stan language. The 'rstan' package provides user-facing R functions\nto parse, compile, test, estimate, and analyze Stan models."
        },
        {
            "name": "uftrace",
            "description": "Dynamic function graph tracer for Linux which demangles C, C++ and Rust\ncalls"
        },
        {
            "name": "rstudio",
            "description": "RStudio is an integrated development environment (IDE) for R."
        },
        {
            "name": "r-shinyjs",
            "description": "Easily Improve the User Experience of Your Shiny Apps in Seconds.\nPerform common useful JavaScript operations in Shiny apps that will\ngreatly improve your apps without having to know any JavaScript.\nExamples include: hiding an element, disabling an input, resetting an\ninput back to its original value, delaying code execution by a few\nseconds, and many more useful functions for both the end user and the\ndeveloper. 'shinyjs' can also be used to easily call your own custom\nJavaScript functions from R."
        },
        {
            "name": "r-bookdown",
            "description": "Authoring Books and Technical Documents with R Markdown. Output formats\nand utilities for authoring books and technical documents with R\nMarkdown."
        }
    ]
}