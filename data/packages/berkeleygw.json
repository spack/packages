{
    "name": "berkeleygw",
    "aliases": [],
    "versions": [
        {
            "name": "3.0.1",
            "url": "https://berkeley.box.com/shared/static/m1dgnhiemo47lhxczrn6si71bwxoxor8.gz",
            "expand": false,
            "checksum": "7d8c2cc1ee679afb48efbdd676689d4d537226b50e13a049dbcb052aaaf3654f"
        },
        {
            "name": "3.0",
            "url": "https://berkeley.box.com/shared/static/lp6hj4kxr459l5a6t05qfuzl2ucyo03q.gz",
            "expand": false,
            "checksum": "ab411acead5e979fd42b8d298dbb0a12ce152e7be9eee0bb87e9e5a06a638e2a"
        },
        {
            "name": "2.1",
            "url": "https://berkeley.box.com/shared/static/ze3azi5vlyw7hpwvl9i5f82kaiid6g0x.gz",
            "expand": false,
            "checksum": "31f3b643dd937350c3866338321d675d4a1b1f54c730b43ad74ae67e75a9e6f2"
        }
    ],
    "latest_version": "3.0",
    "build_system": "MakefilePackage",
    "conflicts": [
        {
            "name": "platform=windows",
            "spec": "",
            "description": "None"
        },
        {
            "name": "+scalapack",
            "spec": "~mpi",
            "description": "scalapack is a parallel library and needs MPI support"
        },
        {
            "name": "+elpa",
            "spec": "~mpi",
            "description": "elpa is a parallel library and needs MPI support"
        }
    ],
    "variants": [
        {
            "name": "mpi",
            "default": true,
            "description": "Builds with MPI support"
        },
        {
            "name": "elpa",
            "default": true,
            "description": "Build with ELPA support"
        },
        {
            "name": "python",
            "default": false,
            "description": "Build with Python support"
        },
        {
            "name": "openmp",
            "default": true,
            "description": "Build with OpenMP support"
        },
        {
            "name": "scalapack",
            "default": true,
            "description": "Build with ScaLAPACK support"
        },
        {
            "name": "hdf5",
            "default": true,
            "description": "Builds with HDF5 support"
        },
        {
            "name": "debug",
            "default": false,
            "description": "Builds with DEBUG flag"
        },
        {
            "name": "verbose",
            "default": false,
            "description": "Builds with VERBOSE flag"
        }
    ],
    "homepage": "https://berkeleygw.org",
    "maintainers": [
        "migueldiascosta"
    ],
    "patches": [],
    "resources": [],
    "description": "BerkeleyGW is a many-body perturbation theory code for excited states,\nusing the GW method and the GW plus Bethe-Salpeter equation (GW-BSE)\nmethod to solve respectively for quasiparticle excitations and optical\nproperties of materials.\n",
    "dependencies": [
        {
            "name": "blas",
            "description": "Intel Math Kernel Library."
        },
        {
            "name": "lapack",
            "description": "Intel Math Kernel Library."
        },
        {
            "name": "scalapack",
            "description": "ScaLAPACK is a library of high-performance linear algebra routines for\nparallel distributed memory machines. It depends on external libraries\nincluding BLAS and LAPACK for Linear Algebra computations. AMD's\noptimized version of ScaLAPACK enables using BLIS and LibFLAME library\nthat have optimized dense matrix functions and solvers for AMD EPYC\nprocessor family CPUs."
        },
        {
            "name": "mpi",
            "description": "MPItrampoline: A forwarding MPI implementation that can use any other\nMPI implementation via an MPI ABI."
        },
        {
            "name": "hdf5",
            "description": "HDF5 is a data model, library, and file format for storing and managing\ndata. It supports an unlimited variety of datatypes, and is designed for\nflexible and efficient I/O and for high volume and complex data."
        },
        {
            "name": "elpa",
            "description": "Eigenvalue solvers for Petaflop-Applications (ELPA)"
        },
        {
            "name": "fftw-api",
            "description": "Intel Math Kernel Library."
        },
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-h5py",
            "description": "The h5py package provides both a high- and low-level interface to the\nHDF5 library from Python."
        },
        {
            "name": "perl",
            "description": "Perl 5 is a highly capable, feature-rich programming language with over\n27 years of development."
        },
        {
            "name": "fftw",
            "description": "FFTW is a C subroutine library for computing the discrete Fourier\ntransform (DFT) in one or more dimensions, of arbitrary input size, and\nof both real and complex data (as well as of even/odd data, i.e. the\ndiscrete cosine/sine transforms or DCT/DST). We believe that FFTW, which\nis free software, should become the FFT library of choice for most\napplications."
        },
        {
            "name": "amdfftw",
            "description": "FFTW (AMD Optimized version) is a comprehensive collection of fast C\nroutines for computing the Discrete Fourier Transform (DFT) and various\nspecial cases thereof. It is an open-source implementation of the Fast\nFourier transform algorithm. It can compute transforms of real and\ncomplex-values arrays of arbitrary size and dimension. AMD Optimized\nFFTW is the optimized FFTW implementation targeted for AMD CPUs. For\nsingle precision build, please use precision value as float. Example :\nspack install amdfftw precision=float"
        },
        {
            "name": "openblas",
            "description": "OpenBLAS: An optimized BLAS library"
        },
        {
            "name": "amdblis",
            "description": "AMD Optimized BLIS. BLIS is a portable software framework for\ninstantiating high-performance BLAS-like dense linear algebra libraries.\nThe framework was designed to isolate essential kernels of computation\nthat, when optimized, immediately enable optimized implementations of\nmost of its commonly used and computationally intensive operations."
        }
    ],
    "dependent_to": []
}