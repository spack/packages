{
    "name": "occa",
    "aliases": [],
    "versions": [
        {
            "name": "develop"
        },
        {
            "name": "1.1.0",
            "tag": "v1.1.0"
        },
        {
            "name": "1.0.9",
            "tag": "v1.0.9"
        },
        {
            "name": "1.0.8",
            "tag": "v1.0.8"
        },
        {
            "name": "1.0.0-alpha.5",
            "tag": "v1.0.0-alpha.5"
        },
        {
            "name": "0.2.0",
            "tag": "v0.2.0"
        },
        {
            "name": "0.1.0",
            "tag": "v0.1.0"
        }
    ],
    "build_system": "Package",
    "conflicts": [
        {
            "name": "%gcc@6:",
            "spec": "^cuda@:8",
            "description": "None"
        },
        {
            "name": "%gcc@7:",
            "spec": "^cuda@:9",
            "description": "None"
        }
    ],
    "variants": [
        {
            "name": "cuda",
            "default": true,
            "description": "Activates support for CUDA"
        },
        {
            "name": "openmp",
            "default": true,
            "description": "Activates support for OpenMP"
        },
        {
            "name": "opencl",
            "default": true,
            "description": "Activates support for OpenCL"
        }
    ],
    "homepage": "http://libocca.org",
    "maintainers": [
        "v-dobrev",
        "dmed256"
    ],
    "patches": [],
    "resources": [],
    "description": "OCCA is an open-source (MIT license) library used to program current\nmulti-core/many-core architectures. Devices (such as CPUs, GPUs, Intel's\nXeon Phi, FPGAs, etc) are abstracted using an offload-model for\napplication development and programming for the devices is done through\na C-based (OKL) or Fortran-based kernel language (OFL). OCCA gives\ndevelopers the ability to target devices at run-time by using run-time\ncompilation for device kernels.\n",
    "dependencies": [
        {
            "name": "cuda",
            "description": "CUDA is a parallel computing platform and programming model invented by\nNVIDIA. It enables dramatic increases in computing performance by\nharnessing the power of the graphics processing unit (GPU). Note: This\npackage does not currently install the drivers necessary to run CUDA.\nThese will need to be installed manually. See:\nhttps://docs.nvidia.com/cuda/ for details."
        }
    ],
    "dependent_to": [
        {
            "name": "ceed",
            "description": "Ceed is a collection of benchmarks, miniapps, software libraries and\nAPIs for efficient high-order finite element and spectral element\ndiscretizations for exascale applications developed in the Department of\nEnergy (DOE) and partially supported by the Exascale Computing Project\n(ECP). This is a Spack bundle package that installs the CEED software\ncomponents."
        },
        {
            "name": "libceed",
            "description": "The CEED API Library: Code for Efficient Extensible Discretizations."
        },
        {
            "name": "mfem",
            "description": "Free, lightweight, scalable C++ library for finite element methods."
        }
    ]
}