{
    "name": "timemory",
    "aliases": [],
    "versions": [
        {
            "name": "master",
            "branch": "master",
            "submodules": true
        },
        {
            "name": "develop",
            "branch": "develop",
            "submodules": true
        },
        {
            "name": "3.2.3",
            "commit": "d535e478646e331a4c65cfd8c8f759c9a363ccc9",
            "submodules": true
        },
        {
            "name": "3.2.2",
            "commit": "4725f4e4a3eea3b80b50a01ea088b5d5a1cf40ab",
            "submodules": true
        },
        {
            "name": "3.2.1",
            "commit": "76ff978d9b1568b7f88a3de82bb84a2042003630",
            "submodules": true
        },
        {
            "name": "3.2.0",
            "commit": "2bdd28e87224558060e27da90f9b6fcfb20dd324",
            "submodules": true
        },
        {
            "name": "3.1.0",
            "commit": "b12de7eeed699d820693fecd6136daff744f21b6",
            "submodules": true
        },
        {
            "name": "3.0.1",
            "commit": "ef638e1cde90275ce7c0e12fc4902c27bcbdeefd",
            "submodules": true
        },
        {
            "name": "3.0.0",
            "commit": "b36b1673b2c6b7ff3126d8261bef0f8f176c7beb",
            "submodules": true
        }
    ],
    "latest_version": "3.2.3",
    "build_system": "CMakePackage",
    "conflicts": [
        {
            "name": "+ipo",
            "spec": "^cmake@:3.8",
            "description": "+ipo is not supported by CMake < 3.9"
        },
        {
            "name": "+python",
            "spec": "~shared~static",
            "description": "+python requires building shared or static libraries"
        },
        {
            "name": "~pic",
            "spec": "+python~shared+static",
            "description": "Python bindings cannot be be linked to static libs w/o +pic"
        },
        {
            "name": "+python_deps",
            "spec": "~python",
            "description": "None"
        },
        {
            "name": "+cupti",
            "spec": "~cuda",
            "description": "CUPTI requires CUDA"
        },
        {
            "name": "+kokkos_tools",
            "spec": "~tools",
            "description": "+kokkos_tools requires +tools"
        },
        {
            "name": "+kokkos_build_config",
            "spec": "~kokkos_tools~tools",
            "description": "+kokkos_build_config requires +tools+kokkos_tools"
        },
        {
            "name": "tls_model=local-dynamic",
            "spec": "+python",
            "description": "+python require tls_model=global-dynamic"
        },
        {
            "name": "tls_model=initial-exec",
            "spec": "+python",
            "description": "+python require tls_model=global-dynamic"
        },
        {
            "name": "tls_model=local-exec",
            "spec": "+python",
            "description": "+python require tls_model=global-dynamic"
        },
        {
            "name": "+nccl",
            "spec": "~gotcha",
            "description": "+nccl requires +gotcha"
        },
        {
            "name": "+nccl",
            "spec": "~shared~static",
            "description": "+nccl requires building shared or static libraries"
        },
        {
            "name": "+mpip_library",
            "spec": "~mpi",
            "description": "+mpip_library requires +mpi"
        },
        {
            "name": "+mpip_library",
            "spec": "~gotcha",
            "description": "+mpip_library requires +gotcha"
        },
        {
            "name": "+mpip_library",
            "spec": "~shared~static",
            "description": "+mpip_library requires building shared or static libraries"
        },
        {
            "name": "+ompt_library",
            "spec": "~ompt",
            "description": "+ompt_library requires +ompt"
        },
        {
            "name": "+ompt_library",
            "spec": "~shared~static",
            "description": "+ompt_library requires building shared or static libraries"
        },
        {
            "name": "+likwid_nvmon",
            "spec": "~likwid",
            "description": "+likwid_nvmon requires +likwid"
        }
    ],
    "variants": [
        {
            "name": "build_type",
            "default": "RelWithDebInfo",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "shared",
            "default": true,
            "description": "Build shared libraries"
        },
        {
            "name": "static",
            "default": false,
            "description": "Build static libraries"
        },
        {
            "name": "pic",
            "default": true,
            "description": "Build position independent code"
        },
        {
            "name": "install_headers",
            "default": true,
            "description": "Install headers"
        },
        {
            "name": "install_config",
            "default": true,
            "description": "Install cmake configuration files"
        },
        {
            "name": "python",
            "default": false,
            "description": "Enable Python support"
        },
        {
            "name": "python_hatchet",
            "default": false,
            "description": "Build Python hatchet submodule (does not conflict with py-hatchet)"
        },
        {
            "name": "python_line_profiler",
            "default": false,
            "description": "Build timemorys extended version of py-line-profiler (does not conflict with py-line-profiler)"
        },
        {
            "name": "python_deps",
            "default": false,
            "description": "Install non-critical python dependencies (may significantly increase spack install time)"
        },
        {
            "name": "mpi",
            "default": false,
            "description": "Enable support for MPI aggregation"
        },
        {
            "name": "nccl",
            "default": false,
            "description": "Enable support for wrapping NCCL functions"
        },
        {
            "name": "tau",
            "default": false,
            "description": "Enable TAU support"
        },
        {
            "name": "papi",
            "default": false,
            "description": "Enable PAPI support"
        },
        {
            "name": "cuda",
            "default": false,
            "description": "Enable CUDA support"
        },
        {
            "name": "cupti",
            "default": false,
            "description": "Enable CUPTI support"
        },
        {
            "name": "tools",
            "default": true,
            "description": "Build/install extra tools"
        },
        {
            "name": "vtune",
            "default": false,
            "description": "Enable VTune support"
        },
        {
            "name": "upcxx",
            "default": false,
            "description": "Enable UPC++ support"
        },
        {
            "name": "gotcha",
            "default": false,
            "description": "Enable GOTCHA support"
        },
        {
            "name": "likwid",
            "default": false,
            "description": "Enable LIKWID CPU marker API support (perfmon)"
        },
        {
            "name": "likwid_nvmon",
            "default": false,
            "description": "Enable LIKWID GPU marker API support (nvmon)"
        },
        {
            "name": "caliper",
            "default": false,
            "description": "Enable Caliper support"
        },
        {
            "name": "dyninst",
            "default": false,
            "description": "Build dynamic instrumentation tools"
        },
        {
            "name": "examples",
            "default": false,
            "description": "Build/install examples"
        },
        {
            "name": "gperftools",
            "default": false,
            "description": "Enable gperftools support"
        },
        {
            "name": "kokkos_tools",
            "default": false,
            "description": "Build generic kokkos-tools libraries, e.g. kp_timemory, kp_timemory_filter"
        },
        {
            "name": "kokkos_build_config",
            "default": false,
            "description": "Build pre-configured (i.e. dedicated) kokkos-tools libraries, e.g. kp_timemory_cpu_flops"
        },
        {
            "name": "cuda_arch",
            "default": "auto",
            "description": "CUDA architecture name"
        },
        {
            "name": "cpu_target",
            "default": "auto",
            "description": "Build for specific cpu architecture (specify cpu-model)"
        },
        {
            "name": "use_arch",
            "default": false,
            "description": "Build all of timemory w/ cpu_target architecture flags (default: roofline toolkit only)"
        },
        {
            "name": "tls_model",
            "default": "global-dynamic",
            "description": "Thread-local static model"
        },
        {
            "name": "lto",
            "default": false,
            "description": "Build with link-time optimization"
        },
        {
            "name": "statistics",
            "default": true,
            "description": "Build components w/ support for statistics (min/max/stddev)"
        },
        {
            "name": "extra_optimizations",
            "default": true,
            "description": "Build timemory with extra optimization flags"
        },
        {
            "name": "cxxstd",
            "default": "14",
            "description": "C++ language standard"
        },
        {
            "name": "cudastd",
            "default": "14",
            "description": "CUDA language standard"
        },
        {
            "name": "unity_build",
            "default": true,
            "description": "Build with CMAKE_UNITY_BUILD=ON for faster builds but larger memory consumption"
        },
        {
            "name": "mpip_library",
            "default": false,
            "description": "Build stand-alone timemory-mpip GOTCHA library"
        },
        {
            "name": "ompt",
            "default": false,
            "description": "Enable OpenMP tools support"
        },
        {
            "name": "ompt_library",
            "default": false,
            "description": "Build stand-alone timemory-ompt library"
        },
        {
            "name": "allinea_map",
            "default": false,
            "description": "Enable Allinea ARM-MAP support"
        },
        {
            "name": "require_packages",
            "default": true,
            "description": "find_package(...) resulting in NOTFOUND generates error"
        },
        {
            "name": "compiler",
            "default": true,
            "description": "Enable compiler instrumentation support"
        },
        {
            "name": "ert",
            "default": true,
            "description": "Enable extern templates for empirical roofline toolkit (ERT)"
        }
    ],
    "homepage": "https://timemory.readthedocs.io/en/latest/",
    "maintainers": [
        "jrmadsen"
    ],
    "patches": [],
    "resources": [],
    "description": "Modular profiling toolkit and suite of libraries and tools for\nC/C++/Fortran/CUDA/Python\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "py-cython",
            "description": "The Cython compiler for writing C extensions for the Python language."
        },
        {
            "name": "pil",
            "description": "The Python Imaging Library (PIL) adds image processing capabilities to\nyour Python interpreter. This library supports many file formats, and\nprovides powerful image processing and graphics capabilities."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "py-hatchet",
            "description": "Hatchet is a performance tool for analyzing hierarchical performance\ndata using a graph-indexed Pandas dataframe."
        },
        {
            "name": "py-matplotlib",
            "description": "Matplotlib is a comprehensive library for creating static, animated, and\ninteractive visualizations in Python."
        },
        {
            "name": "py-mpi4py",
            "description": "This package provides Python bindings for the Message Passing Interface\n(MPI) standard. It is implemented on top of the MPI-1/MPI-2\nspecification and exposes an API which grounds on the standard MPI-2 C++\nbindings."
        },
        {
            "name": "py-pandas",
            "description": "pandas is a fast, powerful, flexible and easy to use open source data\nanalysis and manipulation tool, built on top of the Python programming\nlanguage."
        },
        {
            "name": "py-pydot",
            "description": "Python interface to Graphviz's Dot language"
        },
        {
            "name": "py-pyyaml",
            "description": "PyYAML is a YAML parser and emitter for Python."
        },
        {
            "name": "py-multiprocess",
            "description": "Better multiprocessing and multithreading in Python"
        },
        {
            "name": "mpi",
            "description": "MPItrampoline: A forwarding MPI implementation that can use any other\nMPI implementation via an MPI ABI."
        },
        {
            "name": "nccl",
            "description": "Optimized primitives for collective multi-GPU communication."
        },
        {
            "name": "tau",
            "description": "A portable profiling and tracing toolkit for performance analysis of\nparallel programs written in Fortran, C, C++, UPC, Java, Python."
        },
        {
            "name": "papi",
            "description": "PAPI provides the tool designer and application engineer with a\nconsistent interface and methodology for use of the performance counter\nhardware found in most major microprocessors. PAPI enables software\nengineers to see, in near real time, the relation between software\nperformance and processor events. In addition Component PAPI provides\naccess to a collection of components that expose performance measurement\nopportunities across the hardware and software stack."
        },
        {
            "name": "cuda",
            "description": "CUDA is a parallel computing platform and programming model invented by\nNVIDIA. It enables dramatic increases in computing performance by\nharnessing the power of the graphics processing unit (GPU). Note: This\npackage does not currently install the drivers necessary to run CUDA.\nThese will need to be installed manually. See:\nhttps://docs.nvidia.com/cuda/ for details."
        },
        {
            "name": "upcxx",
            "description": "UPC++ is a C++ library that supports Partitioned Global Address Space\n(PGAS) programming, and is designed to interoperate smoothly and\nefficiently with MPI, OpenMP, CUDA, ROCm/HIP and AMTs. It leverages\nGASNet-EX to deliver low-overhead, fine-grained communication, including\nRemote Memory Access (RMA) and Remote Procedure Call (RPC)."
        },
        {
            "name": "likwid",
            "description": "Likwid is a simple to install and use toolsuite of command line\napplications for performance oriented programmers. It works for Intel\nand AMD processors on the Linux operating system. This version uses the\nperf_event backend which reduces the feature set but allows user\ninstalls. See https://github.com/RRZE-\nHPC/likwid/wiki/TutorialLikwidPerf#feature-limitations for information."
        },
        {
            "name": "gotcha",
            "description": "C software library for shared library function wrapping, enables tools\nto intercept calls into shared libraries"
        },
        {
            "name": "caliper",
            "description": "Caliper is a program instrumentation and performance measurement\nframework. It is designed as a performance analysis toolbox in a\nlibrary, allowing one to bake performance analysis capabilities directly\ninto applications and activate them at runtime."
        },
        {
            "name": "dyninst",
            "description": "API for dynamic binary instrumentation. Modify programs while they are\nexecuting without recompiling, re-linking, or re-executing."
        },
        {
            "name": "gperftools",
            "description": "Google's fast malloc/free implementation, especially for multi-threaded\napplications. Contains tcmalloc, heap-checker, heap-profiler, and cpu-\nprofiler."
        },
        {
            "name": "intel-parallel-studio",
            "description": "Intel Parallel Studio."
        },
        {
            "name": "arm-forge",
            "description": "Arm Forge is the complete toolsuite for software development - with\neverything needed to debug, profile, optimize, edit and build C, C++ and\nFortran applications on Linux for high performance - from single threads\nthrough to complex parallel HPC codes with MPI, OpenMP, threads or CUDA."
        }
    ],
    "dependent_to": []
}