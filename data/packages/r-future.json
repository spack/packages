{
    "name": "r-future",
    "aliases": [],
    "versions": [
        {
            "name": "1.21.0",
            "sha256": "909e6602068eba543a6d2e464b911123cc29efdb600a7000eff0e5624ff0d12d"
        },
        {
            "name": "1.14.0",
            "sha256": "0a535010d97a01b21aaf9d863603e44359335e273019c1e1980bbb5b2917dbcb"
        }
    ],
    "build_system": "RPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://github.com/HenrikBengtsson/future",
    "maintainers": [
        "glennpj"
    ],
    "patches": [],
    "resources": [],
    "description": "Unified Parallel and Distributed Processing in R for Everyone The\npurpose of this package is to provide a lightweight and unified Future\nAPI for sequential and parallel processing of R expression via futures.\nThe simplest way to evaluate an expression in parallel is to use 'x %<-%\n{ expression }' with 'plan(multiprocess)'. This package implements\nsequential, multicore, multisession, and cluster futures. With these, R\nexpressions can be evaluated on the local machine, in parallel a set of\nlocal machines, or distributed on a mix of local and remote machines.\nExtensions to this package implement additional backends for processing\nfutures via compute cluster schedulers etc. Because of its unified API,\nthere is no need to modify any code in order switch from sequential on\nthe local machine to, say, distributed processing on a remote compute\ncluster. Another strength of this package is that global variables and\nfunctions are automatically identified and exported as needed, making it\nstraightforward to tweak existing code to make use of futures.\n",
    "dependencies": [
        {
            "name": "r",
            "description": "R is 'GNU S', a freely available language and environment for\nstatistical computing and graphics which provides a wide variety of\nstatistical and graphical techniques: linear and nonlinear modelling,\nstatistical tests, time series analysis, classification, clustering,\netc. Please consult the R project homepage for further information."
        },
        {
            "name": "r-digest",
            "description": "Create Compact Hash Digests of R Objects Implementation of a function\n'digest()' for the creation of hash digests of arbitrary R objects\n(using the md5, sha-1, sha-256, crc32, xxhash and murmurhash algorithms)\npermitting easy comparison of R language objects, as well as a function\n'hmac()' to create hash-based message authentication code. The md5\nalgorithm by Ron Rivest is specified in RFC 1321, the sha-1 and sha-256\nalgorithms are specified in FIPS-180-1 and FIPS-180-2, and the crc32\nalgorithm is described in\nftp://ftp.rocksoft.com/cliens/rocksoft/papers/crc_v3.txt. For md5,\nsha-1, sha-256 and aes, this package uses small standalone\nimplementations that were provided by Christophe Devine. For crc32, code\nfrom the zlib library is used. For sha-512, an implementation by Aaron\nD. Gifford is used. For xxhash, the implementation by Yann Collet is\nused. For murmurhash, an implementation by Shane Day is used. Please\nnote that this package is not meant to be deployed for cryptographic\npurposes for which more comprehensive (and widely tested) libraries such\nas OpenSSL should be used."
        },
        {
            "name": "r-globals",
            "description": "Identify Global Objects in R Expressions Identifies global (\"unknown\" or\n\"free\") objects in R expressions by code inspection using various\nstrategies, e.g. conservative or liberal. The objective of this package\nis to make it as simple as possible to identify global objects for the\npurpose of exporting them in distributed compute environments."
        },
        {
            "name": "r-listenv",
            "description": "Environments Behaving (Almost) as Lists List environments are\nenvironments that have list-like properties. For instance, the elements\nof a list environment are ordered and can be accessed and iterated over\nusing index subsetting."
        },
        {
            "name": "r-parallelly",
            "description": "Enhancing the 'parallel' Package Utility functions that enhance the\n'parallel' package and support the built-in parallel backends of the\n'future' package. For example, availableCores() gives the number of CPU\ncores available to your R process as given by the operating system,\n'cgroups' and Linux containers, R options, and environment variables,\nincluding those set by job schedulers on high-performance compute\nclusters. If none is set, it will fall back to parallel::detectCores().\nAnother example is makeClusterPSOCK(), which is backward compatible with\nparallel::makePSOCKcluster() while doing a better job in setting up\nremote cluster workers without the need for configuring the firewall to\ndo port-forwarding to your local computer."
        }
    ],
    "dependent_to": [
        {
            "name": "r-future-apply",
            "description": "Apply Function to Elements in Parallel using Futures Implementations of\napply(), by(), eapply(), lapply(), Map(), mapply(), replicate(),\nsapply(), tapply(), and vapply() that can be resolved using any future-\nsupported backend, e.g. parallel on the local machine or distributed on\na compute cluster. These future_*apply() functions come with the same\npros and cons as the corresponding base-R *apply() functions but with\nthe additional feature of being able to be processed via the future\nframework."
        },
        {
            "name": "r-pscbs",
            "description": "Segmentation of allele-specific DNA copy number data and detection of\nregions with abnormal copy number within each parental chromosome. Both\ntumor-normal paired and tumor-only analyses are supported."
        },
        {
            "name": "r-sctransform",
            "description": "Variance Stabilizing Transformations for Single Cell UMI Data A\nnormalization method for single-cell UMI count data using a variance\nstabilizing transformation. The transformation is based on a negative\nbinomial regression model with regularized parameters. As part of the\nsame regression framework, this package also provides functions for\nbatch correction, and data correction. See Hafemeister and Satija 2019\n<doi:10.1101/576827> for more details."
        },
        {
            "name": "r-brms",
            "description": "Bayesian Regression Models using 'Stan': Fit Bayesian generalized\n(non-)linear multivariate multilevel models using 'Stan' for full\nBayesian inference. A wide range of distributions and link functions are\nsupported, allowing users to fit - among others - linear, robust linear,\ncount data, survival, response times, ordinal, zero-inflated, hurdle,\nand even self-defined mixture models all in a multilevel context.\nFurther modeling options include non-linear and smooth terms, auto-\ncorrelation structures, censored data, meta-analytic standard errors,\nand quite a few more. In addition, all parameters of the response\ndistribution can be predicted in order to perform distributional\nregression. Prior specifications are flexible and explicitly encourage\nusers to apply prior distributions that actually reflect their beliefs.\nModel fit can easily be assessed and compared with posterior predictive\nchecks and leave-one-out cross-validation. References: Burkner (2017)\n<doi:10.18637/jss.v080.i01>; Burkner (2018) <doi:10.32614/RJ-2018-017>;\nCarpenter et al. (2017) <doi:10.18637/jss.v076.i01>."
        },
        {
            "name": "r-seurat",
            "description": "Tools for Single Cell Genomics A toolkit for quality control, analysis,\nand exploration of single cell RNA sequencing data. 'Seurat' aims to\nenable users to identify and interpret sources of heterogeneity from\nsingle cell transcriptomic measurements, and to integrate diverse types\nof single cell data. See Satija R, Farrell J, Gennert D, et al (2015)\n<doi:10.1038/nbt.3192>, Macosko E, Basu A, Satija R, et al (2015)\n<doi:10.1016/j.cell.2015.05.002>, and Stuart T, Butler A, et al (2019)\n<doi:10.1016/j.cell.2019.05.031> for more details."
        }
    ]
}