{
    "name": "jansson",
    "aliases": [],
    "versions": [
        {
            "name": "2.13.1",
            "sha256": "f22901582138e3203959c9257cf83eba9929ac41d7be4a42557213a22ebcc7a0"
        },
        {
            "name": "2.13",
            "sha256": "beb47da10cb27668de3012cc193a1873a898ad5710a1126be9e6d3357beb5b30"
        },
        {
            "name": "2.12",
            "sha256": "76260d30e9bbd0ef392798525e8cd7fe59a6450c54ca6135672e3cd6a1642941"
        },
        {
            "name": "2.11",
            "sha256": "6ff0eab3a8baf64d21cae25f88a0311fb282006eb992080722a9099469c32881"
        },
        {
            "name": "2.10",
            "sha256": "b0a899f90ade82e42da0ecabc8af1fa296d69691e7c0786c4994fb79d4833ebb"
        },
        {
            "name": "2.9",
            "sha256": "952fa714b399e71c1c3aa020e32e899f290c82126ca4d0d14cff5d10af457656"
        }
    ],
    "latest_version": "2.13",
    "build_system": "CMakePackage",
    "conflicts": [
        {
            "name": "+ipo",
            "spec": "^cmake@:3.8",
            "description": "+ipo is not supported by CMake < 3.9"
        }
    ],
    "variants": [
        {
            "name": "build_type",
            "default": "RelWithDebInfo",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "shared",
            "default": true,
            "description": "Enables the build of shared libraries"
        }
    ],
    "homepage": "https://www.digip.org/jansson/",
    "maintainers": [
        "ax3l"
    ],
    "patches": [],
    "resources": [],
    "description": "Jansson is a C library for encoding, decoding and manipulating JSON\ndata.\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        }
    ],
    "dependent_to": [
        {
            "name": "libjwt",
            "description": "libjwt JSON Web Token C Library"
        },
        {
            "name": "isaac-server",
            "description": "In Situ Animation of Accelerated Computations: Server"
        },
        {
            "name": "flux-core",
            "description": "A next-generation resource manager (pre-alpha)"
        },
        {
            "name": "isaac",
            "description": "In Situ Animation of Accelerated Computations: Header-Only Library"
        },
        {
            "name": "variorum",
            "description": "Variorum is a library providing vendor-neutral interfaces for monitoring\nand controlling underlying hardware features."
        },
        {
            "name": "jose",
            "description": "This package contains a C library for performing JOSE operations."
        },
        {
            "name": "rng-tools",
            "description": "This is a random number generator daemon. It monitors a set of entropy\nsources, and supplies entropy from them to the system kernel's\n/dev/random machinery."
        },
        {
            "name": "pmix",
            "description": "The Process Management Interface (PMI) has been used for quite some time\nas a means of exchanging wireup information needed for interprocess\ncommunication. However, meeting the significant orchestration challenges\npresented by exascale systems requires that the process-to-system\ninterface evolve to permit a tighter integration between the different\ncomponents of the parallel application and existing and future SMS\nsolutions. PMI Exascale (PMIx) addresses these needs by providing an\nextended version of the PMI definitions specifically designed to support\nexascale and beyond environments by: (a) adding flexibility to the\nfunctionality expressed in the existing APIs, (b) augmenting the\ninterfaces with new APIs that provide extended capabilities, (c) forging\na collaboration between subsystem providers including resource manager,\nfabric, file system, and programming library developers, (d)\nestablishing a standards-like body for maintaining the definitions, and\n(e) providing a reference implementation of the PMIx standard that\ndemonstrates the desired level of scalability while maintaining strict\nseparation between it and the standard itself."
        }
    ]
}