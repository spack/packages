{
    "name": "r-crul",
    "aliases": [],
    "versions": [
        {
            "name": "1.0.0",
            "sha256": "2ade500f6cf89b2d0ca8496b8d4df9937d6f802a35c9ad10d9fab8632cdb1027"
        },
        {
            "name": "0.8.4",
            "sha256": "dbd950ad3b68402e5a5955615b1abcb5c9bdc846c93aa25f96a7a58913d04c8b"
        },
        {
            "name": "0.7.4",
            "sha256": "c963dd666ae3fc89b661ce19fce2fa19a16fc3825e1502105cae98ceb92c6014"
        }
    ],
    "build_system": "RPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://cloud.r-project.org/package=crul",
    "maintainers": [
        "glennpj"
    ],
    "patches": [],
    "resources": [],
    "description": "HTTP Client A simple HTTP client, with tools for making HTTP requests,\nand mocking HTTP requests. The package is built on R6, and takes\ninspiration from Ruby's 'faraday' gem\n(<https://rubygems.org/gems/faraday>). The package name is a play on\ncurl, the widely used command line tool for HTTP, and this package is\nbuilt on top of the R package 'curl', an interface to 'libcurl'\n(<https://curl.haxx.se/libcurl>).\n",
    "dependencies": [
        {
            "name": "r",
            "description": "R is 'GNU S', a freely available language and environment for\nstatistical computing and graphics which provides a wide variety of\nstatistical and graphical techniques: linear and nonlinear modelling,\nstatistical tests, time series analysis, classification, clustering,\netc. Please consult the R project homepage for further information."
        },
        {
            "name": "r-curl",
            "description": "The curl() and curl_download() functions provide highly configurable\ndrop-in replacements for base url() and download.file() with better\nperformance, support for encryption (https, ftps), gzip compression,\nauthentication, and other libcurl goodies. The core of the package\nimplements a framework for performing fully customized requests where\ndata can be processed either in memory, on disk, or streaming via the\ncallback or connection interfaces. Some knowledge of libcurl is\nrecommended; for a more-user-friendly web client see the 'httr' package\nwhich builds on this package with http specific tools and logic."
        },
        {
            "name": "r-r6",
            "description": "Encapsulated Classes with Reference Semantics The R6 package allows the\ncreation of classes with reference semantics, similar to R's built-in\nreference classes. Compared to reference classes, R6 classes are simpler\nand lighter-weight, and they are not built on S4 classes so they do not\nrequire the methods package. These classes allow public and private\nmembers, and they support inheritance, even when the classes are defined\nin different packages."
        },
        {
            "name": "r-urltools",
            "description": "urltools: Vectorised Tools for URL Handling and Parsing"
        },
        {
            "name": "r-httpcode",
            "description": "httpcode: 'HTTP' Status Code Helper Find and explain the meaning of\n'HTTP' status codes. Functions included for searching for codes by full\nor partial number, by message, and get appropriate dog and cat images\nfor many status codes."
        },
        {
            "name": "r-jsonlite",
            "description": "A Simple and Robust JSON Parser and Generator for R A fast JSON parser\nand generator optimized for statistical data and the web. Started out as\na fork of 'RJSONIO', but has been completely rewritten in recent\nversions. The package offers flexible, robust, high performance tools\nfor working with JSON in R and is particularly powerful for building\npipelines and interacting with a web API. The implementation is based on\nthe mapping described in the vignette (Ooms, 2014). In addition to\nconverting JSON data from/to R objects, 'jsonlite' contains functions to\nstream, validate, and prettify JSON data. The unit tests included with\nthe package verify that all edge cases are encoded and decoded\nconsistently for use with dynamic data in systems and applications."
        },
        {
            "name": "r-mime",
            "description": "Map Filenames to MIME Types Guesses the MIME type from a filename\nextension using the data derived from /etc/mime.types in UNIX-type\nsystems."
        }
    ],
    "dependent_to": [
        {
            "name": "r-gistr",
            "description": "Work with 'GitHub' 'Gists' Work with 'GitHub' 'gists' from 'R' (e.g.,\n<https://en.wikipedia.org/wiki/GitHub#Gist>,\n<https://docs.github.com/en/github/writing-on-github/creating-gists/>).\nA 'gist' is simply one or more files with code/text/images/etc. This\npackage allows the user to create new 'gists', update 'gists' with new\nfiles, rename files, delete files, get and delete 'gists', star and 'un-\nstar' 'gists', fork 'gists', open a 'gist' in your default browser, get\nembed code for a 'gist', list 'gist' 'commits', and get rate limit\ninformation when 'authenticated'. Some requests require authentication\nand some do not. 'Gists' website: <https://gist.github.com/>."
        },
        {
            "name": "r-rnoaa",
            "description": "'NOAA' Weather Data from R Client for many 'NOAA' data sources including\nthe 'NCDC' climate 'API' at <https://www.ncdc.noaa.gov/cdo-\nweb/webservices/v2>, with functions for each of the 'API' 'endpoints':\ndata, data categories, data sets, data types, locations, location\ncategories, and stations. In addition, we have an interface for 'NOAA'\nsea ice data, the 'NOAA' severe weather inventory, 'NOAA' Historical\nObserving 'Metadata' Repository ('HOMR') data, 'NOAA' storm data via\n'IBTrACS', tornado data via the 'NOAA' storm prediction center, and\nmore."
        }
    ]
}