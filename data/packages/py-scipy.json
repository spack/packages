{
    "name": "py-scipy",
    "aliases": [],
    "versions": [
        {
            "name": "master",
            "branch": "master"
        },
        {
            "name": "1.7.1",
            "sha256": "6b47d5fa7ea651054362561a28b1ccc8da9368a39514c1bbf6c0977a1c376764"
        },
        {
            "name": "1.7.0",
            "sha256": "998c5e6ea649489302de2c0bc026ed34284f531df89d2bdc8df3a0d44d165739"
        },
        {
            "name": "1.6.3",
            "sha256": "a75b014d3294fce26852a9d04ea27b5671d86736beb34acdfc05859246260707"
        },
        {
            "name": "1.6.2",
            "sha256": "e9da33e21c9bc1b92c20b5328adb13e5f193b924c9b969cd700c8908f315aa59"
        },
        {
            "name": "1.6.1",
            "sha256": "c4fceb864890b6168e79b0e714c585dbe2fd4222768ee90bc1aa0f8218691b11"
        },
        {
            "name": "1.6.0",
            "sha256": "cb6dc9f82dfd95f6b9032a8d7ea70efeeb15d5b5fd6ed4e8537bb3c673580566"
        },
        {
            "name": "1.5.4",
            "sha256": "4a453d5e5689de62e5d38edf40af3f17560bfd63c9c5bd228c18c1f99afa155b"
        },
        {
            "name": "1.5.3",
            "sha256": "ddae76784574cc4c172f3d5edd7308be16078dd3b977e8746860c76c195fa707"
        },
        {
            "name": "1.5.2",
            "sha256": "066c513d90eb3fd7567a9e150828d39111ebd88d3e924cdfc9f8ce19ab6f90c9"
        },
        {
            "name": "1.5.1",
            "sha256": "039572f0ca9578a466683558c5bf1e65d442860ec6e13307d528749cfe6d07b8"
        },
        {
            "name": "1.5.0",
            "sha256": "4ff72877d19b295ee7f7727615ea8238f2d59159df0bdd98f91754be4a2767f0"
        },
        {
            "name": "1.4.1",
            "sha256": "dee1bbf3a6c8f73b6b218cb28eed8dd13347ea2f87d572ce19b289d6fd3fbc59"
        },
        {
            "name": "1.4.0",
            "sha256": "31f7cfa93b01507c935c12b535e24812594002a02a56803d7cd063e9920d25e8"
        },
        {
            "name": "1.3.3",
            "sha256": "64bf4e8ae0db2d42b58477817f648d81e77f0b381d0ea4427385bba3f959380a"
        },
        {
            "name": "1.3.2",
            "sha256": "a03939b431994289f39373c57bbe452974a7da724ae7f9620a1beee575434da4"
        },
        {
            "name": "1.3.1",
            "sha256": "2643cfb46d97b7797d1dbdb6f3c23fe3402904e3c90e6facfe6a9b98d808c1b5"
        },
        {
            "name": "1.3.0",
            "sha256": "c3bb4bd2aca82fb498247deeac12265921fe231502a6bc6edea3ee7fe6c40a7a"
        },
        {
            "name": "1.2.3",
            "sha256": "ecbe6413ca90b8e19f8475bfa303ac001e81b04ec600d17fa7f816271f7cca57"
        },
        {
            "name": "1.2.2",
            "sha256": "a4331e0b8dab1ff75d2c67b5158a8bb9a83c799d7140094dda936d876c7cfbb1"
        },
        {
            "name": "1.2.1",
            "sha256": "e085d1babcb419bbe58e2e805ac61924dac4ca45a07c9fa081144739e500aa3c"
        },
        {
            "name": "1.1.0",
            "sha256": "878352408424dffaa695ffedf2f9f92844e116686923ed9aa8626fc30d32cfd1"
        },
        {
            "name": "1.0.0",
            "sha256": "87ea1f11a0e9ec08c264dc64551d501fa307289460705f6fccd84cbfc7926d10"
        },
        {
            "name": "0.19.1",
            "sha256": "a19a2ca7a7336495ec180adeaa0dfdcf41e96dbbee90d51c3ed828ba570884e6"
        },
        {
            "name": "0.18.1",
            "sha256": "8ab6e9c808bf2fb3e8576cd8cf07226d9cdc18b012c06d9708429a821ac6634e"
        },
        {
            "name": "0.17.0",
            "sha256": "f600b755fb69437d0f70361f9e560ab4d304b1b66987ed5a28bdd9dd7793e089"
        },
        {
            "name": "0.15.1",
            "sha256": "a212cbc3b79e9a563aa45fc5c517b3499198bd7eb7e7be1e047568a5f48c259a"
        },
        {
            "name": "0.15.0",
            "sha256": "0c74e31e08acc8bf9b6ceb9bced73df2ae0cc76003e0366350bc7b26292bf8b1"
        }
    ],
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://www.scipy.org/",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [
        {
            "owner": "builtin.py-scipy",
            "sha256": "5433f60831cb554101520a8f8871ac5a32c95f7a971ccd68b69049535b106780",
            "level": 1,
            "working_dir": ".",
            "url": "https://git.sagemath.org/sage.git/plain/build/pkgs/scipy/patches/extern_decls.patch?id=711fe05025795e44b84233e065d240859ccae5bd",
            "version": "@1.2:1.5.3"
        },
        {
            "owner": "builtin.py-scipy",
            "sha256": "bc9d5dc869d1bf9c85d3fd372070cc87bd359ea019eee2fe20e6a154229dfcc4",
            "level": 1,
            "working_dir": ".",
            "relative_path": "scipy-clang.patch",
            "version": "@1.5.0:1.6.3%clang"
        }
    ],
    "resources": [],
    "description": "SciPy (pronounced \"Sigh Pie\") is a Scientific Library for Python. It\nprovides many user-friendly and efficient numerical routines such as\nroutines for numerical integration and optimization.\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-pybind11",
            "description": "pybind11 -- Seamless operability between C++11 and Python. pybind11 is a\nlightweight header-only library that exposes C++ types in Python and\nvice versa, mainly to create Python bindings of existing C++ code. Its\ngoals and syntax are similar to the excellent Boost.Python library by\nDavid Abrahams: to minimize boilerplate code in traditional extension\nmodules by inferring type information using compile-time introspection."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "py-cython",
            "description": "The Cython compiler for writing C extensions for the Python language."
        },
        {
            "name": "py-pythran",
            "description": "Ahead of Time compiler for numeric kernels."
        },
        {
            "name": "py-pytest",
            "description": "pytest: simple powerful testing with Python."
        },
        {
            "name": "blas",
            "description": "IBM's Engineering and Scientific Subroutine Library (ESSL)."
        },
        {
            "name": "lapack",
            "description": "A BLAS and LAPACK wrapper library with runtime exchangable backends"
        }
    ],
    "dependent_to": [
        {
            "name": "py-dask-glm",
            "description": "Dask-glm is a library for fitting Generalized Linear Models on large\ndatasets."
        },
        {
            "name": "sgpp",
            "description": "SGpp is a library and framework for sparse grids in different flavors.\nSGpp supports both hierarchical spatially-adaptive sparse grids and the\ndimensionally-adaptive sparse grid combination technique."
        },
        {
            "name": "py-resampy",
            "description": "Efficient sample rate conversion in python"
        },
        {
            "name": "py-thirdorder",
            "description": "It helps ShengBTE users create FORCE_CONSTANTS_3RD files efficiently"
        },
        {
            "name": "py-syned",
            "description": "A python library to define the components of a synchrotron beamline and\ntheir positions. They can be read/write to json files. It is used by\nOASYS as a common tool to define sources and optical systems that are\nthen exported to the different add-ons."
        },
        {
            "name": "py-neurokit2",
            "description": "The Python Toolbox for Neurophysiological Signal Processing. This\npackage is the continuation of NeuroKit 1. It's a user-friendly package\nproviding easy access to advanced biosignal processing routines.\nResearchers and clinicians without extensive knowledge of programming or\nbiomedical signal processing can analyze physiological data with only\ntwo lines of code."
        },
        {
            "name": "py-scikit-optimize",
            "description": "Scikit-Optimize, or skopt, is a simple and efficient library to minimize\n(very) expensive and noisy black-box functions. It implements several\nmethods for sequential model-based optimization. skopt aims to be\naccessible and easy to use in many contexts. The library is built on top\nof NumPy, SciPy and Scikit-Learn."
        },
        {
            "name": "py-reproject",
            "description": "The reproject package is a Python package to reproject astronomical\nimages using various techniques via a uniform interface. By\nreprojection, we mean the re-gridding of images from one world\ncoordinate system to another (for example changing the pixel resolution,\norientation, coordinate system). Currently, we have implemented\nreprojection of celestial images by interpolation (like SWARP), as well\nas by finding the exact overlap between pixels on the celestial sphere\n(like Montage). It can also reproject to/from HEALPIX projections by\nrelying on the astropy-healpix package."
        },
        {
            "name": "py-torch-sparse",
            "description": "This package consists of a small extension library of optimized sparse\nmatrix operations with autograd support."
        },
        {
            "name": "py-opppy",
            "description": "The Output Parse-Plot Python (OPPPY) library is a python based data\nanalysis library designed to extract, store, and plot information from\noutput and dump files generated by scientific software packages."
        },
        {
            "name": "py-autograd-gamma",
            "description": "autograd compatible approximations to the derivatives of the Gamma-\nfamily of functions."
        },
        {
            "name": "py-cartopy",
            "description": "Cartopy - a cartographic python library with matplotlib support."
        },
        {
            "name": "py-paramz",
            "description": "The Parameterization Framework."
        },
        {
            "name": "py-metpy",
            "description": "Collection of tools for reading, visualizing and performing calculations\nwith weather data."
        },
        {
            "name": "py-dp-gp-cluster",
            "description": "DP_GP_cluster clusters genes by expression over a time course using a\nDirichlet process Gaussian process model."
        },
        {
            "name": "py-yt",
            "description": "Volumetric Data Analysis yt is a python package for analyzing and\nvisualizing volumetric, multi-resolution data from astrophysical\nsimulations, radio telescopes, and a burgeoning interdisciplinary\ncommunity."
        },
        {
            "name": "py-lightgbm",
            "description": "LightGBM is a gradient boosting framework that uses tree based learning\nalgorithms."
        },
        {
            "name": "py-pymc3",
            "description": "PyMC3 is a Python package for Bayesian statistical modeling and\nProbabilistic Machine Learning focusing on advanced Markov chain Monte\nCarlo (MCMC) and variational inference (VI) algorithms. Its flexibility\nand extensibility make it applicable to a large suite of problems."
        },
        {
            "name": "py-healpy",
            "description": "healpy is a Python package to handle pixelated data on the sphere."
        },
        {
            "name": "py-torch-geometric",
            "description": "PyTorch Geometric (PyG) is a geometric deep learning extension library\nfor PyTorch. It consists of various methods for deep learning on graphs\nand other irregular structures, also known as geometric deep learning,\nfrom a variety of published papers. In addition, it consists of an easy-\nto-use mini-batch loader for many small and single giant graphs, multi\ngpu-support, a large number of common benchmark datasets (based on\nsimple interfaces to create your own), and helpful transforms, both for\nlearning on arbitrary graphs as well as on 3D meshes or point clouds."
        },
        {
            "name": "py-seaborn",
            "description": "Seaborn: statistical data visualization. Seaborn is a library for making\nattractive and informative statistical graphics in Python. It is built\non top of matplotlib and tightly integrated with the PyData stack,\nincluding support for numpy and pandas data structures and statistical\nroutines from scipy and statsmodels."
        },
        {
            "name": "py-mikado",
            "description": "Mikado is a lightweight Python3 pipeline whose purpose is to facilitate\nthe identification of expressed loci from RNA-Seq data * and to select\nthe best models in each locus."
        },
        {
            "name": "treelite",
            "description": "Treelite is a model compiler for efficient deployment of decision tree\nensembles."
        },
        {
            "name": "py-pymatgen",
            "description": "Python Materials Genomics is a robust materials analysis code that\ndefines core object representations for structures and molecules with\nsupport for many electronic structure codes. It is currently the core\nanalysis code powering the Materials Project."
        },
        {
            "name": "hic-pro",
            "description": "HiC-Pro is a package designed to process Hi-C data, from raw fastq files\n(paired-end Illumina data) to the normalized contact maps"
        },
        {
            "name": "py-libensemble",
            "description": "Library for managing ensemble-like collections of computations."
        },
        {
            "name": "py-gpaw",
            "description": "GPAW is a density-functional theory (DFT) Python code based on the\nprojector-augmented wave (PAW) method and the atomic simulation\nenvironment (ASE)."
        },
        {
            "name": "py-umi-tools",
            "description": "Tools for handling Unique Molecular Identifiers in NGS data sets"
        },
        {
            "name": "py-mg-rast-tools",
            "description": "Repository of scripts and libraries for using the MG-RAST API and MG-\nRAST data."
        },
        {
            "name": "py-xarray",
            "description": "N-D labeled arrays and datasets in Python"
        },
        {
            "name": "py-gpytorch",
            "description": "GPyTorch is a Gaussian process library implemented using PyTorch.\nGPyTorch is designed for creating scalable, flexible, and modular\nGaussian process models with ease."
        },
        {
            "name": "py-pybids",
            "description": "bids: interface with datasets conforming to BIDS"
        },
        {
            "name": "py-sncosmo",
            "description": "SNCosmo is a Python library for high-level supernova cosmology analysis."
        },
        {
            "name": "nest",
            "description": "NEST is a simulator for spiking neural network models It focuses on the\ndynamics, size and structure of neural systems rather than on the exact\nmorphology of individual neurons."
        },
        {
            "name": "py-pyugrid",
            "description": "Work with triangular unstructured grids and the data on them."
        },
        {
            "name": "py-pygps",
            "description": "pyGPs is a Python library for Gaussian Process (GP) Regression and\nClassification."
        },
        {
            "name": "py-pycbc",
            "description": "PyCBC is a software package used to explore astrophysical sources of\ngravitational waves. It contains algorithms to analyze gravitational-\nwave data from the LIGO and Virgo detectors, detect coalescing compact\nbinaries, and measure the astrophysical parameters of detected sources.\nPyCBC was used in the first direct detection of gravitational waves and\nis used in the flagship analysis of LIGO and Virgo data."
        },
        {
            "name": "py-labours",
            "description": "Python module dependency visualization."
        },
        {
            "name": "py-scikit-image",
            "description": "Image processing algorithms for SciPy, including IO, morphology,\nfiltering, warping, color manipulation, object detection, etc."
        },
        {
            "name": "py-patsy",
            "description": "A Python package for describing statistical models and for building\ndesign matrices."
        },
        {
            "name": "py-mdanalysis",
            "description": "MDAnalysis is a Python toolkit to analyze molecular dynamics\ntrajectories generated by a wide range of popular simulation packages\nincluding DL_Poly, CHARMM, Amber, NAMD, LAMMPS, and Gromacs. (See the\nlists of supported trajectory formats and topology formats.)"
        },
        {
            "name": "py-elephant",
            "description": "Elephant is a package for analysis of electrophysiology data in Python"
        },
        {
            "name": "py-salib",
            "description": "Python implementations of commonly used sensitivity analysis methods."
        },
        {
            "name": "py-dgl",
            "description": "Deep Graph Library (DGL). DGL is an easy-to-use, high performance and\nscalable Python package for deep learning on graphs. DGL is framework\nagnostic, meaning if a deep graph model is a component of an end-to-end\napplication, the rest of the logics can be implemented in any major\nframeworks, such as PyTorch, Apache MXNet or TensorFlow."
        },
        {
            "name": "py-brian",
            "description": "A clock-driven simulator for spiking neural networks"
        },
        {
            "name": "py-tomopy",
            "description": "TomoPy is an open-source Python package for tomographic data processing\nand image reconstruction."
        },
        {
            "name": "py-ecos",
            "description": "This is the Python package for ECOS: Embedded Cone Solver."
        },
        {
            "name": "cantera",
            "description": "Cantera is a suite of object-oriented software tools for problems\ninvolving chemical kinetics, thermodynamics, and/or transport processes."
        },
        {
            "name": "sparta",
            "description": "small RNA-PARE Target Analyzer (sPARTA) is a tool which utilizes high-\nthroughput sequencing to profile genome-wide cleavage products."
        },
        {
            "name": "py-python-fmask",
            "description": "A set of command line utilities and Python modules that implement the\nFMASK algorithm for Landsat and Sentinel-2"
        },
        {
            "name": "py-vcf-kit",
            "description": "VCF-kit is a command-line based collection of utilities for performing\nanalysis on Variant Call Format (VCF) files."
        },
        {
            "name": "dsqss",
            "description": "DSQSS is a program package for solving quantum many-body problems\ndefined on lattices. It is based on the quantum Monte Carlo method in\nFeynman's path integral representation."
        },
        {
            "name": "py-yahmm",
            "description": "YAHMM is a HMM package for Python, implemented in Cython for speed."
        },
        {
            "name": "reditools",
            "description": "REDItools: python scripts for RNA editing detection by RNA-Seq data.\nREDItools are simple python scripts conceived to facilitate the\ninvestigation of RNA editing at large-scale and devoted to research\ngroups that would to explore such phenomenon in own data but don't have\nsufficient bioinformatics skills. They work on main operating systems\n(although unix/linux-based OS are preferred), can handle reads from\nwhatever platform in the standard BAM format and implement a variety of\nfilters."
        },
        {
            "name": "py-dask-xgboost",
            "description": "Distributed training with XGBoost and Dask.distributed. Deprecated: use\n`py-xgboost+dask` instead."
        },
        {
            "name": "py-osqp",
            "description": "OSQP: The Operator Splitting QP Solver"
        },
        {
            "name": "py-librosa",
            "description": "A python package for music and audio analysis."
        },
        {
            "name": "py-statsmodels",
            "description": "Statistical computations and models for use with SciPy"
        },
        {
            "name": "py-pomegranate",
            "description": "Fast, flexible and easy to use probabilistic modelling in Python."
        },
        {
            "name": "py-pyamg",
            "description": "PyAMG is a library of Algebraic Multigrid (AMG) solvers with a\nconvenient Python interface."
        },
        {
            "name": "py-spgl1",
            "description": "SPGL1 is a solver for large-scale one-norm regularized least squares. It\nis designed to solve any of the following three problems: Basis pursuit\ndenoise (BPDN): minimize ||x||_1 subject to ||Ax - b||_2 <= sigma, Basis\npursuit (BP): minimize ||x||_1 subject to Ax = b Lasso: minimize ||Ax -\nb||_2 subject to ||x||_1 <= tau, The matrix A can be defined explicitly,\nor as an operator that returns both both Ax and A'b. SPGL1 can solve\nthese three problems in both the real and complex domains."
        },
        {
            "name": "py-networkit",
            "description": "NetworKit is a growing open-source toolkit for large-scale network\nanalysis. Its aim is to provide tools for the analysis of large networks\nin the size range from thousands to billions of edges. For this purpose,\nit implements efficient graph algorithms, many of them parallel to\nutilize multicore architectures. These are meant to compute standard\nmeasures of network analysis, such as degree sequences, clustering\ncoefficients, and centrality measures. In this respect, NetworKit is\ncomparable to packages such as NetworkX, albeit with a focus on\nparallelism and scalability."
        },
        {
            "name": "py-cdo",
            "description": "The cdo package provides an interface to the Climate Data Operators from\nPython."
        },
        {
            "name": "py-pylops",
            "description": "Many useful operators, however, do not lend themselves to an explicit\nmatrix representation when used to solve large-scale problems. PyLops\noperators, on the other hand, still represent a matrix and can be\ntreated in a similar way, but do not rely on the explicit creation of a\ndense (or sparse) matrix itself. Conversely, the forward and adjoint\noperators are represented by small pieces of codes that mimic the effect\nof the matrix on a vector or another matrix."
        },
        {
            "name": "py-dadi",
            "description": "Fit population genetic models of demography and selection using\ndiffusion approximations to the allele frequency spectrum"
        },
        {
            "name": "py-ucsf-pyem",
            "description": "UCSF pyem is a collection of Python modules and command-line utilities\nfor electron microscopy of biological samples."
        },
        {
            "name": "py-tpot",
            "description": "A Python Automated Machine Learning tool that optimizes machine\nlearning pipelines using genetic programming."
        },
        {
            "name": "isescan",
            "description": "A python pipeline to identify IS (Insertion Sequence) elements in genome\nand metagenome"
        },
        {
            "name": "py-symfit",
            "description": "Symbolic Fitting; fitting as it should be."
        },
        {
            "name": "py-deeptools",
            "description": "deepTools addresses the challenge of handling the large amounts of data\nthat are now routinely generated from DNA sequencing centers."
        },
        {
            "name": "py-pyani",
            "description": "pyani is a Python3 module that provides support for calculating average\nnucleotide identity (ANI) and related measures for whole genome\ncomparisons, and rendering relevant graphical summary output. Where\navailable, it takes advantage of multicore systems, and can integrate\nwith SGE/OGE-type job schedulers for the sequence comparisons."
        },
        {
            "name": "orthofinder",
            "description": "OrthoFinder is a fast, accurate and comprehensive analysis tool for\ncomparative genomics. It finds orthologues and orthogroups infers rooted\ngene trees for all orthogroups and infers a rooted species tree for the\nspecies being analysed. OrthoFinder also provides comprehensive\nstatistics for comparative genomic analyses. OrthoFinder is simple to\nuse and all you need to run it is a set of protein sequence files (one\nper species) in FASTA format."
        },
        {
            "name": "py-pydmd",
            "description": "PyDMD is a Python package that uses Dynamic Mode Decomposition for a\ndata-driven model simplification based on spatiotemporal coherent\nstructures."
        },
        {
            "name": "py-py6s",
            "description": "A wrapper for the 6S Radiative Transfer Model to make it easy to run\nsimulations with a variety of input parameters, and to produce outputs\nin an easily processable form."
        },
        {
            "name": "py-python-meep",
            "description": "Python-meep is a wrapper around libmeep. It allows the scripting of\nMeep-simulations with Python"
        },
        {
            "name": "py-biom-format",
            "description": "The BIOM file format (canonically pronounced biome) is designed to be a\ngeneral-use format for representing biological sample by observation\ncontingency tables."
        },
        {
            "name": "py-keras",
            "description": "Deep Learning library for Python. Convnets, recurrent neural networks,\nand more. Runs on Theano or TensorFlow."
        },
        {
            "name": "py-nestle",
            "description": "Nested sampling algorithms for evaluating Bayesian evidence."
        },
        {
            "name": "py-gym",
            "description": "OpenAI Gym is a toolkit for developing and comparing reinforcement\nlearning algorithms. This is the gym open-source library, which gives\nyou access to a standardized set of environments."
        },
        {
            "name": "partitionfinder",
            "description": "PartitionFinder is free open source software to select best-fit\npartitioning schemes and models of molecular evolution for phylogenetic\nanalyses."
        },
        {
            "name": "alps",
            "description": "Algorithms for Physics Simulations Tags: Condensed Matter Physics,\nComputational Physics"
        },
        {
            "name": "lvarray",
            "description": "LvArray portable HPC containers."
        },
        {
            "name": "py-hdbscan",
            "description": "HDBSCAN - Hierarchical Density-Based Spatial Clustering of Applications\nwith Noise. Performs DBSCAN over varying epsilon values and integrates\nthe result to find a clustering that gives the best stability over\nepsilon. This allows HDBSCAN to find clusters of varying densities\n(unlike DBSCAN), and be more robust to parameter selection. In practice\nthis means that HDBSCAN returns a good clustering straight away with\nlittle or no parameter tuning -- and the primary parameter, minimum\ncluster size, is intuitive and easy to select. HDBSCAN is ideal for\nexploratory data analysis; it's a fast and robust algorithm that you can\ntrust to return meaningful clusters (if there are any)."
        },
        {
            "name": "gatetools",
            "description": "Python tools for GATE, see https://github.com/OpenGATE/Gate"
        },
        {
            "name": "py-projectq",
            "description": "ProjectQ is an open-source software framework for quantum computing\nstarted at ETH Zurich. It allows users to implement their quantum\nprograms in Python using a powerful and intuitive syntax. ProjectQ can\nthen translate these programs to any type of back-end, be it a simulator\nrun on a classical computer of an actual quantum chip."
        },
        {
            "name": "py-spykeutils",
            "description": "Utilities for analyzing electrophysiological data"
        },
        {
            "name": "py-rioxarray",
            "description": "rasterio xarray extension."
        },
        {
            "name": "py-xgboost",
            "description": "XGBoost is an optimized distributed gradient boosting library designed\nto be highly efficient, flexible and portable."
        },
        {
            "name": "py-nilearn",
            "description": "Statistical learning for neuroimaging in Python."
        },
        {
            "name": "py-tensorflow",
            "description": "TensorFlow is an Open Source Software Library for Machine Intelligence"
        },
        {
            "name": "callflow",
            "description": "CallFlow is an interactive visual analysis tool that provides a high-\nlevel overview of CCTs together with semantic refinement operations to\nprogressively explore the CCTs."
        },
        {
            "name": "py-sfepy",
            "description": "SfePy (http://sfepy.org) is a software for solving systems of coupled\npartial differential equations (PDEs) by the finite element method in\n1D, 2D and 3D. It can be viewed both as black-box PDE solver, and as a\nPython package which can be used for building custom applications."
        },
        {
            "name": "akantu",
            "description": "Akantu means a little element in Kinyarwanda, a Bantu language. From\nnow on it is also an opensource object-oriented Finite Element library\nwhich has the ambition to be generic and efficient."
        },
        {
            "name": "py-ase",
            "description": "The Atomic Simulation Environment (ASE) is a set of tools and Python\nmodules for setting up, manipulating, running, visualizing and analyzing\natomistic simulations."
        },
        {
            "name": "py-nipype",
            "description": "Neuroimaging in Python: Pipelines and Interfaces."
        },
        {
            "name": "py-qsymm",
            "description": "Qsymm is a symmetry finder and symmetric Hamiltonian generator. It\nautomatically generates model Hamiltonians from symmetry constraints and\nfinds the full symmetry group of your Hamiltonian."
        },
        {
            "name": "py-abipy",
            "description": "Python package to automate ABINIT calculations and analyze the results."
        },
        {
            "name": "py-scs",
            "description": "SCS: splitting conic solver"
        },
        {
            "name": "nrm",
            "description": "Node Resource Manager"
        },
        {
            "name": "py-fits-tools",
            "description": "Tools for manipulating FITS images using primarily scipy & native python\nroutines"
        },
        {
            "name": "py-pydv",
            "description": "PDV is a 1D graphics and data analysis tool, heavily based on the ULTRA\nplotting tool"
        },
        {
            "name": "py-hyperopt",
            "description": "Hyperopt is a Python library for serial and parallel optimization over\nawkward search spaces, which may include real-valued, discrete, and\nconditional dimensions."
        },
        {
            "name": "py-lmfit",
            "description": "Least-Squares Minimization with Bounds and Constraints"
        },
        {
            "name": "py-goatools",
            "description": "Python scripts to find enrichment of GO terms"
        },
        {
            "name": "py-mlxtend",
            "description": "Mlxtend (machine learning extensions) is a Python library of useful\ntools for the day-to-day data science tasks."
        },
        {
            "name": "py-cvxpy",
            "description": "Convex optimization, for everyone."
        },
        {
            "name": "py-bayesian-optimization",
            "description": "Pure Python implementation of bayesian global optimization with gaussian\nprocesses."
        },
        {
            "name": "py-gluoncv",
            "description": "GluonCV provides implementations of state-of-the-art (SOTA) deep\nlearning algorithms in computer vision. It aims to help engineers,\nresearchers, and students quickly prototype products, validate new ideas\nand learn computer vision."
        },
        {
            "name": "py-openmc",
            "description": "The OpenMC project aims to provide a fully-featured Monte Carlo particle\ntransport code based on modern methods. It is a constructive solid\ngeometry, continuous-energy transport code that uses ACE format cross\nsections. The project started under the Computational Reactor Physics\nGroup at MIT."
        },
        {
            "name": "py-guiqwt",
            "description": "guiqwt is a set of tools for curve and image plotting (extension to\nPythonQwt)"
        },
        {
            "name": "py-cnvkit",
            "description": "Copy number variation toolkit for high-throughput sequencing."
        },
        {
            "name": "py-wradlib",
            "description": "wradlib is designed to assist you in the most important steps of\nprocessing weather radar data. These may include: reading common data\nformats, georeferencing, converting reflectivity to rainfall intensity,\nidentifying and correcting typical error sources (such as clutter or\nattenuation) and visualising the data."
        },
        {
            "name": "py-checkm-genome",
            "description": "Assess the quality of microbial genomes recovered from isolates, single\ncells, and metagenomes"
        },
        {
            "name": "py-sparse",
            "description": "This library provides multi-dimensional sparse arrays."
        },
        {
            "name": "py-visdom",
            "description": "Visdom aims to facilitate visualization of (remote) data with an\nemphasis on supporting scientific experimentation."
        },
        {
            "name": "py-netket",
            "description": "NetKet is an open-source project, delivering cutting-edge methods for\nthe study of many-body quantum systems with artificial neural networks\nand machine learning techniques."
        },
        {
            "name": "py-motmetrics",
            "description": "The py-motmetrics library provides a Python implementation of metrics\nfor benchmarking multiple object trackers (MOT)."
        },
        {
            "name": "cosmomc",
            "description": "CosmoMC is a Fortran 2008 Markov-Chain Monte-Carlo (MCMC) engine for\nexploring cosmological parameter space, together with Fortran and python\ncode for analysing Monte-Carlo samples and importance sampling (plus a\nsuite of scripts for building grids of runs, plotting and presenting\nresults)."
        },
        {
            "name": "py-gensim",
            "description": "Gensim is a Python library for topic modelling, document indexing and\nsimilarity retrieval with large corpora. Target audience is the natural\nlanguage processing (NLP) and information retrieval (IR) community."
        },
        {
            "name": "orthofiller",
            "description": "OrthoFiller: Identifying missing annotations for evolutionarily\nconserved genes."
        },
        {
            "name": "py-pyscf",
            "description": "PySCF is a collection of electronic structure programs powered by\nPython."
        },
        {
            "name": "py-theano",
            "description": "Optimizing compiler for evaluating mathematical expressions on CPUs and\nGPUs."
        },
        {
            "name": "py-misopy",
            "description": "MISO (Mixture of Isoforms) is a probabilistic framework that quantitates\nthe expression level of alternatively spliced genes from RNA-Seq data,\nand identifies differentially regulated isoforms or exons across\nsamples."
        },
        {
            "name": "py-dask-ml",
            "description": "Scalable Machine Learning with Dask."
        },
        {
            "name": "faiss",
            "description": "Faiss is a library for efficient similarity search and clustering of\ndense vectors. Faiss contains algorithms that search in sets of vectors\nof any size, up to ones that possibly do not fit in RAM. It also\ncontains supporting code for evaluation and parameter tuning. Faiss is\nwritten in C++ with complete wrappers for Python/numpy. Some of the most\nuseful algorithms are implemented on the GPU. It is developed by\nFacebook AI Research."
        },
        {
            "name": "py-dxchange",
            "description": "DXchange provides an interface with tomoPy and raw tomographic data\ncollected at different synchrotron facilities."
        },
        {
            "name": "py-phonopy",
            "description": "Phonopy is an open source package for phonon calculations at harmonic\nand quasi-harmonic levels."
        },
        {
            "name": "py-torch-cluster",
            "description": "This package consists of a small extension library of highly optimized\ngraph cluster algorithms for the use in PyTorch."
        },
        {
            "name": "pfapack",
            "description": "A library for numerically computing the Pfaffian of a real or complex\nskew-symmetric matrix. This is based on computing the tridiagonal form\nof the matrix under unitary congruence transformations."
        },
        {
            "name": "py-gpy",
            "description": "The Gaussian Process Toolbox."
        },
        {
            "name": "py-gemini",
            "description": "GEMINI (GEnome MINIng) is a flexible framework for exploring genetic\nvariation in the context of the wealth of genome annotations available\nfor the human genome."
        },
        {
            "name": "py-scikit-learn",
            "description": "A set of python modules for machine learning and data mining."
        },
        {
            "name": "py-pyheadtail",
            "description": "CERN PyHEADTAIL numerical n-body simulation code for simulating macro-\nparticle beam dynamics with collective effects."
        },
        {
            "name": "py-lifelines",
            "description": "Survival analysis was originally developed and applied heavily by the\nactuarial and medical community. Its purpose was to answer *why do\nevents occur now versus later* under uncertainty (where *events* might\nrefer to deaths, disease remission, etc.). *lifelines* is a pure Python\nimplementation of the best parts of survival analysis."
        },
        {
            "name": "py-arviz",
            "description": "ArviZ (pronounced \"AR-vees\") is a Python package for exploratory\nanalysis of Bayesian models. Includes functions for posterior analysis,\nmodel checking, comparison and diagnostics."
        },
        {
            "name": "sirius",
            "description": "Domain specific library for electronic structure calculations"
        },
        {
            "name": "py-astropy",
            "description": "The Astropy Project is a community effort to develop a single core\npackage for Astronomy in Python and foster interoperability between\nPython astronomy packages."
        },
        {
            "name": "py-kmodes",
            "description": "Python implementations of the k-modes and k-prototypes clustering\nalgorithms for clustering categorical data."
        },
        {
            "name": "py-filterpy",
            "description": "This library provides Kalman filtering and various related optimal and\nnon-optimal filtering software written in Python."
        },
        {
            "name": "py-pyrad",
            "description": "RADseq for phylogenetics & introgression analyses"
        },
        {
            "name": "pagmo",
            "description": "Parallel Global Multiobjective Optimizer (and its Python alter ego\nPyGMO) is a C++ / Python platform to perform parallel computations of\noptimisation tasks (global and local) via the asynchronous generalized\nisland model."
        },
        {
            "name": "py-cuml",
            "description": "cuML is a suite of libraries that implement machine learning algorithms\nand mathematical primitives functions that share compatible APIs with\nother RAPIDS projects."
        },
        {
            "name": "py-localcider",
            "description": "Tools for calculating sequence properties of disordered proteins"
        },
        {
            "name": "py-mapclassify",
            "description": "Classification Schemes for Choropleth Maps."
        }
    ]
}